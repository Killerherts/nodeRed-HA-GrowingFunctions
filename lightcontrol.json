[{"id":"7d089cb2d4b93e5e","type":"inject","z":"e9ac4911b30dde89","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"60","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":126.00000381469727,"y":999.3333530426025,"wires":[["16e64339d335486a"]]},{"id":"16e64339d335486a","type":"ha-wait-until","z":"e9ac4911b30dde89","name":"","server":"","version":2,"outputs":2,"entityId":"input_boolean.turn_off_grow_side_2","entityIdFilterType":"exact","property":"state","comparator":"is","value":"off","valueType":"str","timeout":"1","timeoutType":"num","timeoutUnits":"seconds","checkCurrentState":true,"blockInputOverrides":true,"outputProperties":[{"property":"flip","propertyType":"msg","value":"","valueType":"entity"}],"entityLocation":"data","entityLocationType":"none","x":296.00000381469727,"y":1019.3333530426025,"wires":[["c987bb876b62cd57"],[]]},{"id":"c987bb876b62cd57","type":"api-current-state","z":"e9ac4911b30dde89","name":"Cache Light On","server":"","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"input_datetime.lights_on_time","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"payload","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"},{"property":"lightOn","propertyType":"msg","value":"","valueType":"entityState"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":476.00000381469727,"y":999.3333530426025,"wires":[["4bcd0b5774d95b5e"]]},{"id":"4bcd0b5774d95b5e","type":"ha-wait-until","z":"e9ac4911b30dde89","name":"","server":"","version":2,"outputs":2,"entityId":"input_boolean.has_flip_to_flower_started","entityIdFilterType":"exact","property":"state","comparator":"is","value":"on","valueType":"str","timeout":"1","timeoutType":"num","timeoutUnits":"seconds","checkCurrentState":true,"blockInputOverrides":true,"outputProperties":[],"entityLocation":"data","entityLocationType":"none","x":636.0000038146973,"y":999.3333530426025,"wires":[["29ec3c88316b5d12"],[]]},{"id":"29ec3c88316b5d12","type":"api-current-state","z":"e9ac4911b30dde89","name":"Light Switch State","server":"","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"switch.600_rspec","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"switchState","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":830,"y":1000,"wires":[["afc2d9bf6f6f8957"]]},{"id":"afc2d9bf6f6f8957","type":"api-current-state","z":"e9ac4911b30dde89","name":"Flip State","server":"","version":3,"outputs":1,"halt_if":"","halt_if_type":"str","halt_if_compare":"is","entity_id":"input_boolean.has_flip_to_flower_started","state_type":"str","blockInputOverrides":false,"outputProperties":[{"property":"flipState","propertyType":"msg","value":"","valueType":"entityState"},{"property":"data","propertyType":"msg","value":"","valueType":"entity"}],"for":"0","forType":"num","forUnits":"minutes","override_topic":false,"state_location":"payload","override_payload":"msg","entity_location":"data","override_data":"msg","x":1000,"y":1000,"wires":[["54cc856e6c28b14c"]]},{"id":"54cc856e6c28b14c","type":"function","z":"e9ac4911b30dde89","name":"Manage Lights","func":"// Define a global variable for debug logging\nvar debugMode = false;\n\n// Function to log debug messages with labels\nfunction logDebug(label, value) {\n    if (debugMode) {\n        node.warn(label + ' ' + value);\n    }\n}\n\n// Function to toggle debug mode on/off\nfunction toggleDebugMode() {\n    debugMode = !debugMode;\n    if (debugMode) {\n        node.warn('Debug mode is ON');\n    } else {\n        node.warn('Debug mode is OFF');\n    }\n}\n\n// Function to parse time in HH:mm:ss format to seconds\nfunction parseTimeToSeconds(timeStr) {\n    var parts = timeStr.split(':');\n    if (parts.length === 3) {\n        var hours = parseInt(parts[0]);\n        var minutes = parseInt(parts[1]);\n        var seconds = parseInt(parts[2]);\n        return hours * 3600 + minutes * 60 + seconds;\n    } else {\n        // Handle invalid time format if needed\n        node.error('Invalid time format in msg.lightOn');\n        return 0; // Return 0 as a fallback\n    }\n}\n\n// Function to calculate the lights control logic\nfunction calculateLightsControl() {\n    var currentTime = new Date().getTime() / 1000; // Get current time in seconds\n    var flipStarted = msg.flipState;\n    var switchState = msg.switchState; // Get the current state of the switch\n    var lightsOnTimeInSeconds = parseTimeToSeconds(msg.lightOn);\n    var lightsOffTimeInSeconds;\n\n    // Calculate lightsOffTimeInSeconds based on flipStarted\n    if (flipStarted == 'on') {\n        // Flip switch is on, so lights are off for 12 hours\n        lightsOffTimeInSeconds = lightsOnTimeInSeconds + 12 * 3600;\n    } else {\n        // Flip switch is off, so lights are off for 18 hours\n        lightsOffTimeInSeconds = lightsOnTimeInSeconds + 18 * 3600;\n    }\n\n    // Debugging: Log the values of lightsOnTimeInSeconds, lightsOffTimeInSeconds, currentTime, and flipStarted\n    logDebug('lightsOnTimeInSeconds:', lightsOnTimeInSeconds);\n    logDebug('lightsOffTimeInSeconds:', lightsOffTimeInSeconds);\n    logDebug('currentTime:', currentTime);\n    logDebug('flipStarted:', flipStarted);\n\n    if (lightsOnTimeInSeconds < lightsOffTimeInSeconds) {\n        // Lights come on and go off on the same day\n        if (currentTime >= lightsOnTimeInSeconds && currentTime < lightsOffTimeInSeconds) {\n            // Within the time range and switch is off, turn on the lights\n            if (switchState == 'off') {\n                msg.payload = {\n                    service_domain: 'homeassistant',\n                    service: 'turn_on',\n                    entity_id: 'switch.600_rspec'\n                };\n                // Debugging: Log that the lights are being turned on\n                logDebug('Turning on the lights', '');\n                node.send(msg);\n                return msg;\n            }\n        } else {\n            // Outside the time range or switch is already on, turn off the lights\n            if (switchState == 'on') {\n                msg.payload = {\n                    service_domain: 'homeassistant',\n                    service: 'turn_off',\n                    entity_id: 'switch.600_rspec'\n                };\n                // Debugging: Log that the lights are being turned off\n                logDebug('Turning off the lights', '');\n                node.send(msg);\n                return msg;\n            }\n        }\n    } else {\n        // Lights come on before midnight and go off after midnight\n        if (currentTime >= lightsOnTimeInSeconds || currentTime < lightsOffTimeInSeconds) {\n            // Within the time range and switch is off, turn on the lights\n            if (switchState == 'off') {\n                msg.payload = {\n                    service_domain: 'homeassistant',\n                    service: 'turn_on',\n                    entity_id: 'switch.600_rspec'\n                };\n                // Debugging: Log that the lights are being turned on\n                logDebug('Turning on the lights', '');\n                node.send(msg);\n                return msg;\n            }\n        } else {\n            // Outside the time range or switch is already on, turn off the lights\n            if (switchState == 'on') {\n                msg.payload = {\n                    service_domain: 'homeassistant',\n                    service: 'turn_off',\n                    entity_id: 'switch.600_rspec'\n                };\n                // Debugging: Log that the lights are being turned off\n                logDebug('Turning off the lights', '');\n                node.send(msg);\n                return msg;\n            }\n        }\n    }\n\n    // No action needed, switch is already in the desired position\n    // Debugging: Log that no action is needed\n    logDebug('No action needed');\n}\n\n// Call the calculateLightsControl function to perform the lights control logic\ncalculateLightsControl();\n\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":1200,"y":1000,"wires":[["fb7f815e12f54cb0"]]},{"id":"fb7f815e12f54cb0","type":"api-call-service","z":"e9ac4911b30dde89","name":"","server":"","version":5,"debugenabled":true,"domain":"{{payload.service_domain}}","service":"{{payload.service}}","areaId":[],"deviceId":[],"entityId":["{{payload.entity_id}}"],"data":"","dataType":"jsonata","mergeContext":"","mustacheAltTags":false,"outputProperties":[],"queue":"none","x":1560,"y":980,"wires":[[]]}]
