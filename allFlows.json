[
  {
    "id": "f24803d10ac9bfd3",
    "type": "tab",
    "label": "Side 2 Grow",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "e98b0164b89adf68",
    "type": "tab",
    "label": "Tent",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "1f9ff542be636aa9",
    "type": "tab",
    "label": "Side 1 ",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "a826652fd99df3a0",
    "type": "tab",
    "label": "Side 1 Table 2",
    "disabled": false,
    "info": "",
    "env": []
  },
  {
    "id": "c599125aba891332",
    "type": "ha-device-config",
    "name": "Side 1 Table 2 P2 Dryback",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "3b1aac4b8e11aa97",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "c599125aba891332",
    "name": "Side 1 Table 2 P2 Dryback ",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 Table 2 P2 Dryback"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": "%"
      },
      {
        "property": "min_value",
        "value": 2
      },
      {
        "property": "max_value",
        "value": 50
      },
      {
        "property": "step_value",
        "value": 1
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "5fd6e22b972c054a",
    "type": "ha-device-config",
    "name": "Side 1 Table 2 Moisture Target",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "new",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "52b67ba70833bf17",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "5fd6e22b972c054a",
    "name": "Side 1 Table 2 Moisture Target",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 Table 2 Moisture Target"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": "%"
      },
      {
        "property": "min_value",
        "value": ""
      },
      {
        "property": "max_value",
        "value": ""
      },
      {
        "property": "step_value",
        "value": 1
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "5451b60cb9cc9577",
    "type": "ha-device-config",
    "name": "Side 1 Table 2 P1 Delay",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "7af6402dfb23d731",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "5451b60cb9cc9577",
    "name": "Side 1 Table 2 P1 Delay",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 Table 2 P1 Delay"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": "seconds"
      },
      {
        "property": "min_value",
        "value": ""
      },
      {
        "property": "max_value",
        "value": 5000
      },
      {
        "property": "step_value",
        "value": ""
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "9e79752795d3e271",
    "type": "ha-device-config",
    "name": "Side 1 Table 2 P2 Delay",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "b2ddf247d46cd1eb",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "9e79752795d3e271",
    "name": "Side 1 Table 2 P2 Delay",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 Table 2 P2 Delay"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": "seconds"
      },
      {
        "property": "min_value",
        "value": ""
      },
      {
        "property": "max_value",
        "value": 5000
      },
      {
        "property": "step_value",
        "value": ""
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "8ffacf4d55952a40",
    "type": "ha-device-config",
    "name": "Side 1 Max Deleta",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "2ee22e47a8eab437",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "8ffacf4d55952a40",
    "name": "Side 1 Max Delta",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 Max Delta"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": ""
      },
      {
        "property": "min_value",
        "value": 1
      },
      {
        "property": "max_value",
        "value": 100
      },
      {
        "property": "step_value",
        "value": 1
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "fd80fa5349fba060",
    "type": "ha-device-config",
    "name": "Side 1 Desired Moisture",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "4169597fa49cd85b",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "fd80fa5349fba060",
    "name": "Side 1 Desired Moisture",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 Desired Moisture"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": ""
      },
      {
        "property": "min_value",
        "value": 1
      },
      {
        "property": "max_value",
        "value": 100
      },
      {
        "property": "step_value",
        "value": 1
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "9919a561046dcaf1",
    "type": "ha-device-config",
    "name": "Side 1 P1 Shot Size",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "c0f8954daaa16b78",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "9919a561046dcaf1",
    "name": "Side 1 P1 Shot Size",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 P1 Shot Size"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": ""
      },
      {
        "property": "min_value",
        "value": 1
      },
      {
        "property": "max_value",
        "value": 300
      },
      {
        "property": "step_value",
        "value": 1
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "2f65721c72456d9c",
    "type": "ha-device-config",
    "name": "Side 1 P2 Shot Size",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "fd7c1408eb42699d",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "2f65721c72456d9c",
    "name": "Side 1 P2 Shot Size",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 P2 Shot Size"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": ""
      },
      {
        "property": "min_value",
        "value": 1
      },
      {
        "property": "max_value",
        "value": 300
      },
      {
        "property": "step_value",
        "value": 1
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "6da1c519f6c7dc05",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "",
    "name": "Side 1 P2 Dryback Percentage",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 P2 Dryback Percentage"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": ""
      },
      {
        "property": "min_value",
        "value": 1
      },
      {
        "property": "max_value",
        "value": 100
      },
      {
        "property": "step_value",
        "value": 1
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "ebf7fca5e63e827c",
    "type": "ha-device-config",
    "name": "Side 1 Table 2 Dark Hours",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "091ba25d13f32e9f",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "ebf7fca5e63e827c",
    "name": "Side 1 Table 2 Dark Hours",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 Table 2 Dark Hours"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": "hrs"
      },
      {
        "property": "min_value",
        "value": 0
      },
      {
        "property": "max_value",
        "value": 24
      },
      {
        "property": "step_value",
        "value": 1
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "e1d657851ccfe7d7",
    "type": "ha-device-config",
    "name": "Side 1 Table 2 Highest Soil Reading",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "016894b0f307adf7",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "e1d657851ccfe7d7",
    "name": "Side 1 Table 2 Highest Soil %",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 Table 2 Highest Soil %"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": "%"
      },
      {
        "property": "min_value",
        "value": ""
      },
      {
        "property": "max_value",
        "value": ""
      },
      {
        "property": "step_value",
        "value": ""
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "16d708474df46870",
    "type": "ha-device-config",
    "name": "Side 1 Table 2 Generative",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "abb119775b0b3ed3",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "16d708474df46870",
    "name": "Side 1 Table 2 Generative ",
    "version": "6",
    "entityType": "switch",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 Table 2 Generative "
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "56ef9ca7dd72c341",
    "type": "ha-device-config",
    "name": "Side 1 Table 2 Maintenance Phase",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "f4ff0d1e97276844",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "56ef9ca7dd72c341",
    "name": "Side 1 Table 2 Maintenance Phase",
    "version": "6",
    "entityType": "switch",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 Table 2 Maintenance Phase"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "96fb2de74520ef1a",
    "type": "ha-device-config",
    "name": "Side 1 Table 2 Lights On Time",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "c1d8138ae2c8fc10",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "96fb2de74520ef1a",
    "name": "Side 1 Table 2 Lights On Time",
    "version": "6",
    "entityType": "time",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 Table 2 Lights On Time"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "87d5f6db036f19fd",
    "type": "ha-device-config",
    "name": "Side 2 Max Dryback",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "c0af415cdad51aa6",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "87d5f6db036f19fd",
    "name": "Side 2 Max Dryback",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 2 Max Dryback"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": "%"
      },
      {
        "property": "min_value",
        "value": ""
      },
      {
        "property": "max_value",
        "value": ""
      },
      {
        "property": "step_value",
        "value": 1
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "3503e29ee90a2700",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "2f4706baf2c07404",
    "name": "Side 2 P2 Shot Size",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 2 P2 Shot Size"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": "Seconds"
      },
      {
        "property": "min_value",
        "value": ""
      },
      {
        "property": "max_value",
        "value": ""
      },
      {
        "property": "step_value",
        "value": ""
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "2bf5647936ad1664",
    "type": "ha-device-config",
    "name": "Side 2 P1 Shot Size",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "26179060d167c1ab",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "2bf5647936ad1664",
    "name": "Side 2 P1 Shot Size",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 2 P1 Shot Size"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": "Seconds"
      },
      {
        "property": "min_value",
        "value": ""
      },
      {
        "property": "max_value",
        "value": ""
      },
      {
        "property": "step_value",
        "value": ""
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "63cf68dd526f3251",
    "type": "ha-device-config",
    "name": "Side 2 P2 Dryback",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "fe3198f151105d48",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "63cf68dd526f3251",
    "name": "Side 2 P2 Dryback",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 2 P2 Dryback"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": "%"
      },
      {
        "property": "min_value",
        "value": ""
      },
      {
        "property": "max_value",
        "value": ""
      },
      {
        "property": "step_value",
        "value": ""
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "eeed088d60b506ea",
    "type": "ha-device-config",
    "name": "Side 1 Table 2 Max Dryback",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "738a591ae03dd3f5",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "eeed088d60b506ea",
    "name": "Side 1 Table 2 Max Drybacks",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 Table 2 Max Drybacks"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": "%"
      },
      {
        "property": "min_value",
        "value": ""
      },
      {
        "property": "max_value",
        "value": ""
      },
      {
        "property": "step_value",
        "value": ""
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "2f4706baf2c07404",
    "type": "ha-device-config",
    "name": "Side 2 P2 Shot Size",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "4ebadf0b2e15c0b4",
    "type": "ha-device-config",
    "name": "Side 2 Moisture Target",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "5c396ade052bfdc8",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "4ebadf0b2e15c0b4",
    "name": "Side 2 Moisture Target",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 2 Moisture Target"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": "%"
      },
      {
        "property": "min_value",
        "value": ""
      },
      {
        "property": "max_value",
        "value": ""
      },
      {
        "property": "step_value",
        "value": ""
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "a29d4d4058737d9a",
    "type": "ha-device-config",
    "name": "Side 1 Max Temp",
    "hwVersion": "",
    "manufacturer": "Node-RED",
    "model": "",
    "swVersion": "",
    "server": "s"
  },
  {
    "id": "39a1a692c9adaf37",
    "type": "ha-entity-config",
    "server": "s",
    "deviceConfig": "a29d4d4058737d9a",
    "name": "Side 1 Max Temp",
    "version": "6",
    "entityType": "number",
    "haConfig": [
      {
        "property": "name",
        "value": "Side 1 Max Temp"
      },
      {
        "property": "icon",
        "value": ""
      },
      {
        "property": "entity_picture",
        "value": ""
      },
      {
        "property": "entity_category",
        "value": ""
      },
      {
        "property": "device_class",
        "value": ""
      },
      {
        "property": "unit_of_measurement",
        "value": "f"
      },
      {
        "property": "min_value",
        "value": 65
      },
      {
        "property": "max_value",
        "value": 90
      },
      {
        "property": "step_value",
        "value": 1
      },
      {
        "property": "mode",
        "value": "box"
      }
    ],
    "resend": false,
    "debugEnabled": false
  },
  {
    "id": "b6b647143f2e8fda",
    "type": "function",
    "z": "f24803d10ac9bfd3",
    "name": "Turn Lights On/Off",
    "func": "const HA_CONFIG = {\n    homeAssistantObject: 'homeassistant.homeAssistant',\n    darkHoursEntity: 'input_number.side_2_dark_hours',\n    switchStateEntity: 'switch.600_rspec',\n    lightsOnTimeEntity: 'input_datetime.side_2_lights_on_time',\n    lightControlEntity: 'switch.600_rspec',\n    serviceDomain: 'switch'\n};\n\n\n// Fetch the Home Assistant object and states\nconst d = global.get(HA_CONFIG.homeAssistantObject);\nlet darkHours = parseFloat(d.states[HA_CONFIG.darkHoursEntity].state);\nlet switchState = d.states[HA_CONFIG.switchStateEntity].state;\nlet lightsOnTime = d.states[HA_CONFIG.lightsOnTimeEntity].state;\nlet debugMode = false;\n\n// Function to log debug messages with labels\nfunction logDebug(label, value) {\n    if (debugMode) {\n        node.warn(label + ' ' + value);\n    }\n}\n\n// Function to toggle debug mode on/off\nfunction toggleDebugMode() {\n    debugMode = !debugMode;\n    if (debugMode) {\n        node.warn('Debug mode is ON');\n    } else {\n        node.warn('Debug mode is OFF');\n    }\n}\n\n// Function to parse time in HH:mm:ss format to seconds\nfunction parseTimeToSeconds(timeStr) {\n    var parts = timeStr.split(':');\n    if (parts.length === 3) {\n        var hours = parseInt(parts[0]);\n        var minutes = parseInt(parts[1]);\n        var seconds = parseInt(parts[2]);\n        return hours * 3600 + minutes * 60 + seconds;\n    } else {\n        // Handle invalid time format if needed\n        node.error('Invalid time format in msg.lightOn');\n        return 0; // Return 0 as a fallback\n    }\n}\n\n// Function to calculate the lights control logic\nfunction calculateLightsControl() {\n    const currentDate = new Date();\n    const currentHours = currentDate.getHours();\n    const currentMinutes = currentDate.getMinutes();\n    const currentSeconds = currentDate.getSeconds();\n    const currentTime = (currentHours * 3600) + (currentMinutes * 60) + currentSeconds;\n    let lightsOnTimeInSeconds = parseTimeToSeconds(lightsOnTime);\n    let lightsOffTimeInSeconds = lightsOnTimeInSeconds + ((24 - darkHours) * 3600);\n\n    if (lightsOffTimeInSeconds >= 86400) {\n        lightsOffTimeInSeconds -= 86400;\n    }\n    \n    logDebug('lightsOnTimeInSeconds:', lightsOnTimeInSeconds);\n    logDebug('lightsOffTimeInSeconds:', lightsOffTimeInSeconds);\n    logDebug('darkHours:', darkHours);\n    logDebug('current time ', currentTime);\n    logDebug('Switch State: ', switchState);\n\n    if (lightsOnTimeInSeconds < lightsOffTimeInSeconds) {\n        if (currentTime >= lightsOnTimeInSeconds && currentTime < lightsOffTimeInSeconds) {\n            if (switchState == 'off') {\n                return turnOnLights();\n            }\n        } else {\n            if (switchState == 'on') {\n                return turnOffLights();\n            }\n        }\n    } else {\n        if (currentTime >= lightsOnTimeInSeconds || currentTime < lightsOffTimeInSeconds) {\n            if (switchState == 'off') {\n                return turnOnLights();\n            }\n        } else {\n            if (switchState == 'on') {\n                return turnOffLights();\n            }\n        }\n    }\n    \n    logDebug('No action needed', '');\n}\n\nfunction turnOnLights() {\n    msg.payload = {\n        service_domain: HA_CONFIG.serviceDomain,\n        service: 'turn_on',\n        entity_id: HA_CONFIG.lightControlEntity\n    };\n    logDebug('Turning on the lights', '');\n    return node.send(msg);\n}\n\nfunction turnOffLights() {\n    msg.payload = {\n        service_domain: HA_CONFIG.serviceDomain,\n        service: 'turn_off',\n        entity_id: HA_CONFIG.lightControlEntity\n    };\n    logDebug('Turning off the lights', '');\n    return node.send(msg);\n}\n\n// Call the calculateLightsControl function to perform the lights control logic\ncalculateLightsControl();\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 40,
    "wires": [
      [
        "fb7f815e12f54cb0"
      ]
    ]
  },
  {
    "id": "fb7f815e12f54cb0",
    "type": "api-call-service",
    "z": "f24803d10ac9bfd3",
    "name": "Call Service Payload Var",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 610,
    "y": 40,
    "wires": [
      []
    ]
  },
  {
    "id": "7521aca4964b343b",
    "type": "inject",
    "z": "f24803d10ac9bfd3",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 40,
    "wires": [
      [
        "b6b647143f2e8fda"
      ]
    ]
  },
  {
    "id": "07e8e6bd6f2ac38f",
    "type": "api-call-service",
    "z": "f24803d10ac9bfd3",
    "name": "Action Equipment",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 532.8571395874023,
    "y": 358.57143211364746,
    "wires": [
      []
    ]
  },
  {
    "id": "14573cd6232b06c2",
    "type": "inject",
    "z": "f24803d10ac9bfd3",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 132.85713958740234,
    "y": 358.57143211364746,
    "wires": [
      [
        "b044244b9ed623a6"
      ]
    ]
  },
  {
    "id": "b044244b9ed623a6",
    "type": "function",
    "z": "f24803d10ac9bfd3",
    "name": "Control RH Equipment",
    "func": "// Get the Home Assistant object\nconst ha = global.get('homeassistant').homeAssistant;\n\nconst side2Rh = ha.states[\"sensor.grow_side2_table_humidity_rh\"].state;\nconst requiredRh = ha.states[\"sensor.required_rh_for_desired_kpa_side_2\"].state;\nconst humidifierState = ha.states[\"switch.garden_humidifier_side_2\"].state;\nconst humidifierEntityId = 'switch.garden_humidifier_side_2';\nconst delta = 3;\nconst dehumidifierState = ha.states[\"switch.grow_side2_dehumidifer\"].state;\nconst dehumidifierEntityId = 'switch.grow_side2_dehumidifer';\nlet debugMode = false;\n\nlogDebug('side2Rh, requiredRh', [side2Rh, requiredRh]);\nlogDebug('dehumidifierState', dehumidifierState);\nlogDebug('delta', delta);\nlogDebug('debugMode', debugMode);\nlogDebug('rh - required', (side2Rh - requiredRh))\nlogDebug('humidifierState', humidifierState);\n\n// Function to log debug messages with labels\nfunction logDebug(label, value) {\n    if (debugMode) {\n        node.warn(label + ' ' + value);\n    }\n}\n\n// Function to toggle debug mode on/off\nfunction toggleDebugMode() {\n    debugMode = !debugMode;\n    if (debugMode) {\n        node.warn('Debug mode is ON');\n    } else {\n        node.warn('Debug mode is OFF');\n    }\n}\n\n// Function to check humidity for humidifier\nfunction checkHumidifier(state, entityId, required, actual) {\n    logDebug(\"check humid ran\", required - actual + \" \" + state)\n    if (state === \"off\" && required - actual >= delta) {\n        msg.payload = {\n            service: 'turn_on',\n            domain: 'switch',\n            entity_id: entityId\n        };\n        node.send(msg);\n    } else if (state === \"on\" && actual >= required) {\n        msg.payload = {\n            service: 'turn_off',\n            domain: 'switch',\n            entity_id: entityId\n        };\n        node.send(msg);\n    } else {\n        logDebug('Humid No action taken');\n    }\n}\n\n// Function to check humidity for dehumidifier\nfunction checkDehumidifier(state, entityId, required, actual) {\n    logDebug(\"check dehumid ran\", required - actual + \" \" + state)\n    if (state === \"off\" && actual - required >= delta) {\n        msg.payload = {\n            service: 'turn_on',\n            domain: 'switch',\n            entity_id: entityId\n        };\n        node.send(msg);\n    } else if (state === \"on\" && actual <= required) {\n        msg.payload = {\n            service: 'turn_off',\n            domain: 'switch',\n            entity_id: entityId\n        };\n        node.send(msg);\n    } else {\n        logDebug('No action taken Dehumid');\n    }\n}\n\n// Check humidifier\ncheckHumidifier(humidifierState, humidifierEntityId, requiredRh, side2Rh);\n\n// Check dehumidifier\ncheckDehumidifier(dehumidifierState, dehumidifierEntityId, requiredRh, side2Rh);\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 322.85713958740234,
    "y": 358.57143211364746,
    "wires": [
      [
        "07e8e6bd6f2ac38f"
      ]
    ]
  },
  {
    "id": "5a715ded63bd0fbe",
    "type": "inject",
    "z": "f24803d10ac9bfd3",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 110,
    "y": 160,
    "wires": [
      [
        "092db9cb1bf30fa5"
      ]
    ]
  },
  {
    "id": "092db9cb1bf30fa5",
    "type": "function",
    "z": "f24803d10ac9bfd3",
    "name": "Feed By WC",
    "func": "/**One thhing of note I use a traditional automation to update my\n * highest soil sensor. I find this is easy just to do through the gui\n */\n\n// Constants for Home Assistant Entity IDs\nconst ENTITY_IDS = {\n    highestSoilSensor: 'input_number.highest_soil_sensor_value_side_2',\n    generative: 'input_boolean.side_2_generative_steering',\n    darkHours: 'input_number.side_2_dark_hours',\n    lightOnTime: 'input_datetime.side_2_lights_on_time',\n    soilMoisture: 'sensor.vwc_a1_soil_sensor',\n    maintenancePhase: 'input_boolean.side_2_maintance_phase',\n    feedPumpSwitch: 'switch.side_2_feed_pump_switch',\n    p2ShotSize: 'number.side_2_p2_shot_size',\n    p1ShotSize: 'number.side_2_p1_shot_size',\n    maxDelta: 'number.side_2_max_dryback',\n    p2Dryback: 'number.side_2_p2_dryback',\n    targetMoisture: 'number.side_2_moisture_target'\n};\n\nconst MIN_IRRIGATION_FREQUENCY = 6 * 60; // 10 minutes in seconds\nconst debug = false;\n/**\n * \n * Nothing needs to be changed under this section unless your modifing \n * the basic functionality or how the script works. \n * Modifiy at your own risk\n * \n */\n\n// For retrieving data:\nconst DESIRED_MOISTURE = getHAState(ENTITY_IDS.targetMoisture);\nconst P1_THRESHOLD = 2; //close enough to desired moisture without blowing over\nconst P2_THRESHOLD = getHAState(ENTITY_IDS.p2Dryback);\nconst MAX_DELTA = 9; getHAState(ENTITY_IDS.targetMoisture);\nconst DELAY_FOR_P1_FEED = getHAState(ENTITY_IDS.p1ShotSize);\nconst DELAY_FOR_P2_FEED = getHAState(ENTITY_IDS.p2ShotSize);\n\nlet currentTime = getCurrentTime();\nlet currentTimeUTC = getCurrentTimeUTC();\nlet darkHours = parseFloat(getHAState(ENTITY_IDS.darkHours));\nlet generative = getHAState(ENTITY_IDS.generative);\nlet highestSoilsensorVal = getHAState(ENTITY_IDS.highestSoilSensor);\nlet lightOnTime = convertTimeToSecondsUTC(getHAState(ENTITY_IDS.lightOnTime));\nlet maintenancePhase = getHAState(ENTITY_IDS.maintenancePhase);\nlet soilMoisture = parseFloat(getHAState(ENTITY_IDS.soilMoisture));\n\n// Calculate parameters\nconst SECONDS_IN_DAY = 24 * 60 * 60; \nlet lastChangedTimeMs = new Date(global.get('homeassistant').homeAssistant.states[ENTITY_IDS.feedPumpSwitch].last_changed).getTime();\nlet lightOffTime = calculateLightOffTime(darkHours, lightOnTime);\nlet irrigationEnd = calculateIrrigationEnd(lightOffTime);\nlet irrigationStart = calculateIrrigationStart(generative, lightOnTime);\nlet inIrrigationWindow = checkInIrrigationWindow(currentTime, irrigationStart, irrigationEnd);\nlet lastChanged = convert_epoch_to_utc_seconds(lastChangedTimeMs);\nlet moistureDifference = DESIRED_MOISTURE - soilMoisture;\nlet timeSinceLastIrrigation;\n\n//store payloads\nlet delayAndTurnOffOutput = null;\nlet flipBooleanOutput = null;\nlet logOutput = null;\nlet setInputNumberOutput = null;\nlet turnOnOutput = null;\n\n\n//handle midnight crossover\nif (lastChanged < currentTimeUTC) {\n    timeSinceLastIrrigation = Math.floor(currentTimeUTC - lastChanged);\n} else {\n    timeSinceLastIrrigation = Math.floor((SECONDS_IN_DAY - lastChanged) + currentTimeUTC);\n}\n\n/**\n * Constructs a payload for Home Assistant service calls.\n * \n * @param {string} service - The service to be called (e.g., 'turn_on', 'turn_off').\n * @param {string} domain - The domain of the entity (e.g., 'switch', 'light').\n * @param {string} entity_id - The id of the entity to be acted upon.\n * @param {number} delay - The delay in seconds before the action is performed.\n * @param {object} data - Any additional data to be passed along with the service call.\n * @returns {object} - The constructed payload.\n */\nfunction buildPayload(service, domain, entity_id, delay = null, data = {}) {\n    let payload = {\n        service: service,\n        domain: domain,\n        entity_id: entity_id,\n        data: data\n    };\n\n    let message = {\n        payload: payload\n    };\n\n    if (delay !== null) {\n        message.delay = delay * 1000; // Convert seconds to milliseconds\n    }\n\n    return message;\n}\n// Whenever you want to build a payload in your processControlFlow function:\n// const payload = buildPayload('turn_on', 'switch', 'switch.your_p1_feed_id', DELAY_FOR_P1_FEED);\n\n//calculate irrigation end time\nfunction calculateIrrigationEnd(lightOffTime) {\n    if (generative == 'on') {\n        return lightOffTime - 2 * 60 * 60;\n    } else {\n        return lightOffTime - 60 * 60;\n    }\n}\n\n// Function to calculate irrigation start time dynamically based on lights on time\nfunction calculateIrrigationStart(generative, lightOnTime) {\n    let irrigationStart = lightOnTime;\n    if (generative == \"on\") {\n        irrigationStart = irrigationStart + (2 * 60 * 60); // Add 2 hours for generative steering\n    } else {\n        // Use a default start time if generative is not enabled\n        irrigationStart = irrigationStart + (60 * 60); // Add 1 hour\n    }\n    return irrigationStart;\n}\n\n//check for null states\nfunction checkForNullStates() {\n    const requiredStates = [\"highestSoilsensorVal\", \"generative\", \"darkHours\", \"lightOnTime\", \"soilMoisture\", \"maintenancePhase\"];\n\n    const nullStates = requiredStates.filter(state => eval(state) === null);\n\n    if (nullStates.length > 0) {\n        // Log and report each null state\n        nullStates.forEach(state => {\n            const errorMessage = `ERROR: ${state} is null`;\n            logOutput = logbookMsg(errorMessage);\n\n            // Create a persistent notification in Home Assistant\n            const persistentError = buildPayload('create', 'persistent_notification', '', null, { message: errorMessage, title: 'Irrigation System'});\n            node.send([null,null,null,null, persistentError]);\n        });\n        return true;\n    }\n}\n\n//converts lastchangems to seconds\nfunction convert_epoch_to_utc_seconds(epoch_ms) {\n    const epoch_seconds = epoch_ms / 1000;\n    const seconds_into_day_utc = Math.floor(epoch_seconds % SECONDS_IN_DAY);\n    return seconds_into_day_utc;\n}\n\n// Function to convert a time string in the format HH:MM:SS to seconds from midnight\nfunction convertTimeToSecondsUTC(timeString) {\n    // Split the time string by ':' to get hours, minutes, and seconds\n    const parts = timeString.split(':');\n    const hours = parseInt(parts[0], 10);\n    const minutes = parseInt(parts[1], 10);\n    const seconds = parseInt(parts[2], 10);\n\n    // Calculate the total number of seconds from midnight\n    return hours * 3600 + minutes * 60 + seconds;\n}\n\n// Function to calculate light off time dynamically based on dark hours\nfunction calculateLightOffTime(darkHours, lightOnTime) {\n    let lightDuration = (24 - darkHours) * 60 * 60; // Calculate light duration based on dark hours\n    let lightOffTime = (lightOnTime + lightDuration) % SECONDS_IN_DAY; // Adjust for midnight crossover\n\n    return lightOffTime;\n}\n\n// Function to check if the current time is within the irrigation window\nfunction checkInIrrigationWindow(currentTime, irrigationStart, irrigationEnd) {\n    // Normalize times to a 24-hour cycle to handle cases where times span across midnight\n    currentTime = currentTime % SECONDS_IN_DAY;\n    irrigationStart = irrigationStart % SECONDS_IN_DAY;\n    irrigationEnd = irrigationEnd % SECONDS_IN_DAY;\n\n    if (irrigationStart < irrigationEnd) {\n        // The irrigation window does not span midnight\n        return currentTime >= irrigationStart && currentTime < irrigationEnd;\n    } else {\n        // The irrigation window spans midnight\n        // currentTime must be either after irrigationStart on the same day or before irrigationEnd on the next day\n        return currentTime >= irrigationStart || currentTime < irrigationEnd;\n    }\n}\n\n\n// Function to get current time in seconds\nfunction getCurrentTime() {\n    const now = new Date();\n    return now.getSeconds() + (60 * (now.getMinutes() + 60 * now.getHours()));\n}\n\n// Function to get current time in UTC seconds\nfunction getCurrentTimeUTC() {\n    const now = new Date();\n    const utcSeconds = (now.getUTCHours() * 3600) + (now.getUTCMinutes() * 60) + now.getUTCSeconds();\n    return utcSeconds;\n}\n\n// Function to retrieve state from Home Assistant\nfunction getHAState(state) {\n    // Check if the states object and the specific state exist\n    if (global.get('homeassistant') && global.get('homeassistant').homeAssistant\n        && global.get('homeassistant').homeAssistant.states\n        && global.get('homeassistant').homeAssistant.states[state]) {\n        return global.get('homeassistant').homeAssistant.states[state].state;\n    } else {\n        // Handle the case where the state or any parent object is undefined\n        node.warn(\"State not found or global object is undefined: \" + state);\n        return null; // or you can throw an error or return a default value\n    }\n}\n\n\n// Enhanced logging for debugging\nfunction logDebugData() {\n    if (debug) {\n        node.warn(\"Is in irrigation window? \" + inIrrigationWindow);\n        node.warn(\"Generative: \" + generative);\n        node.warn('Maintance Phase: '+ maintenancePhase)\n        node.warn(\"Dark Hours: \" + darkHours);\n        node.warn(\"Soil moisture: \" + soilMoisture);\n        node.warn(\"last Irrigation Run \" + utcMsToLocalHHMMSS(lastChangedTimeMs));\n        node.warn(\"Highest Sensor Value: \" + highestSoilsensorVal);\n        // Additional logging to help with debugging\n        node.warn(\"Moisture Difference: \" + moistureDifference);\n        node.warn(\"timeSinceLastIrrigation: \" + toHHMMSS(timeSinceLastIrrigation));\n        node.warn(\"Current Time: \" + new Date(currentTime * 1000).toISOString().substr(11, 8));\n        node.warn(\"Irrigation Start: \" + new Date(irrigationStart * 1000).toISOString().substr(11, 8));\n        node.warn(\"Irrigation End: \" + new Date(irrigationEnd * 1000).toISOString().substr(11, 8));\n    }\n}\n\n\n//function to make logbook entries\nfunction logbookMsg(message) {\n    \n    // Create a message object with the payload for the api-call-service node\n    const logMessage = {\n        payload: {\n            service_domain: 'logbook',\n            service: 'log',\n            data: {\n            entity_id: ENTITY_IDS.feedPumpSwitch,\n            name: \"Irrigation System\",\n            message: message\n            }\n        }\n    };\n\n    return logMessage;\n}\n\n//check for min time between irrigation\nfunction minStopTime() {\n    if (timeSinceLastIrrigation < MIN_IRRIGATION_FREQUENCY) {\n        logOutput = logbookMsg(`Last irrigation was less than ${MIN_IRRIGATION_FREQUENCY / 60} minutes ago. Not performing a check now.`);\n        node.send([null,null,null,null, logOutput]);\n        return true;\n    }\nreturn false;\n}\n\n//check for max dryback\nfunction maxDrybackCheck() {\n    if (moistureDifference > MAX_DELTA) {\n        logOutput = logbookMsg(\"Max Dryback Feeding\");\n        turnOnOutput = buildPayload('turn_on', 'switch', ENTITY_IDS.feedPumpSwitch);\n        delayAndTurnOffOutput = buildPayload('turn_off', 'switch', ENTITY_IDS.feedPumpSwitch, DELAY_FOR_P2_FEED);\n        node.send([turnOnOutput, delayAndTurnOffOutput, null, null, logOutput]);\n        return true;\n    }\nreturn false;\n}\n//reset maintenance phase if outside irrigation window and it is on\nfunction resetMaintenancePhase() {\n    if (!inIrrigationWindow && maintenancePhase != 'off') {\n        logOutput = logbookMsg(\"Resetting Maintenance Switch\");\n        flipBooleanOutput = buildPayload('turn_off', 'input_boolean', ENTITY_IDS.maintenancePhase);\n        node.send([null, null, flipBooleanOutput, null, logOutput]);\n    }\nreturn false;\n}\n\n//reset highest soil sensor at beginging of lights on\nfunction setMaxSoilSensorTracker() {\n    //node.warn(\"set soil warn\" + (currentTime -lightOnTime))\n    //reset highest soil value sensor at beginging of lights on\n    if (Math.abs(currentTime - lightOnTime) <= 60) {\n        logOutput = logbookMsg(\"Flipping Highest Soil Sensor to 0\");\n        setInputNumberOutput = buildPayload('set_value', 'input_number', ENTITY_IDS.highestSoilSensor, null, { value: 0 });\n        node.send([null, null, null, setInputNumberOutput, logOutput]);\n        return true;\n    }\nreturn false;\n}\n\n//switch maintenance phase if in irrigation window and desired moisture is reached\nfunction switchMaintenancePhase() {\n    if (maintenancePhase == 'off' && inIrrigationWindow) {\n        if (highestSoilsensorVal >= DESIRED_MOISTURE) {\n            logOutput = logbookMsg('P2 Flip Switch Desired Moisture Reached');\n            flipBooleanOutput = buildPayload('turn_on', 'input_boolean', ENTITY_IDS.maintenancePhase);\n            node.send ([null, null, flipBooleanOutput, null, logOutput]);\n            return true;\n        }\n    }\nreturn false;\n}\n//convert seconds to HH:MM:SS for output only\nfunction toHHMMSS(timeSeconds) {\n    const sec = parseInt(timeSeconds, 10); // convert value to number if it's string\n    let hours = Math.floor(sec / 3600); // get hours\n    let minutes = Math.floor((sec - (hours * 3600)) / 60); // get minutes\n    let seconds = sec - (hours * 3600) - (minutes * 60); // get seconds\n\n    // add 0 if value < 10; Example: 2 -> 02\n    if (hours < 10) { hours = \"0\" + hours; }\n    if (minutes < 10) { minutes = \"0\" + minutes; }\n    if (seconds < 10) { seconds = \"0\" + seconds; }\n\n    return hours + ':' + minutes + ':' + seconds; // Return is HH : MM : SS\n}\n\n//convert utc ms to local time HH:MM:SS\nfunction utcMsToLocalHHMMSS(utcMs) {\n    var date = new Date(utcMs);\n    return date.toLocaleTimeString('en-US', { hour12: false });\n}\n//run p1 and p2 feeds\nfunction processControlFlow() {\n    if (maintenancePhase == 'off' && moistureDifference > P1_THRESHOLD) {\n        logOutput = logbookMsg('P1 feed');\n        turnOnOutput = buildPayload('turn_on', 'switch', ENTITY_IDS.feedPumpSwitch);\n        delayAndTurnOffOutput = buildPayload('turn_off', 'switch', ENTITY_IDS.feedPumpSwitch, DELAY_FOR_P1_FEED);\n        node.send([turnOnOutput, delayAndTurnOffOutput, null, null, logOutput]);\n    } else if ( maintenancePhase == 'on' && moistureDifference > P2_THRESHOLD) {\n        logOutput = logbookMsg('P2 feed');\n        turnOnOutput = buildPayload('turn_on', 'switch', ENTITY_IDS.feedPumpSwitch);\n        delayAndTurnOffOutput = buildPayload('turn_off', 'switch', ENTITY_IDS.feedPumpSwitch, DELAY_FOR_P2_FEED);\n        node.send ([turnOnOutput, delayAndTurnOffOutput, null, null, logOutput]);\n    }\n}\n\nlogDebugData();\ncheckForNullStates();\nsetMaxSoilSensorTracker();\nswitchMaintenancePhase();\nif (!minStopTime()) {\n    if (!maxDrybackCheck()) {\n        if (inIrrigationWindow) {\n            processControlFlow();\n        }\n    }   \n}\nresetMaintenancePhase();",
    "outputs": 5,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 290,
    "y": 160,
    "wires": [
      [
        "2ec135aa4af279fa"
      ],
      [
        "74ceb87764563bf0"
      ],
      [
        "3e72bcc008934145"
      ],
      [
        "34e363fa91d35661"
      ],
      [
        "b7638673e7747203"
      ]
    ],
    "outputLabels": [
      "Turn On Feed",
      "Turn Off Feed",
      "Flip Input Boolean",
      "Set Highest Value Back",
      "LogBook"
    ]
  },
  {
    "id": "2ec135aa4af279fa",
    "type": "api-call-service",
    "z": "f24803d10ac9bfd3",
    "name": "Call Service Payload Var",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 550,
    "y": 100,
    "wires": [
      []
    ]
  },
  {
    "id": "74ceb87764563bf0",
    "type": "delay",
    "z": "f24803d10ac9bfd3",
    "name": "Delay",
    "pauseType": "delayv",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1000",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 490,
    "y": 160,
    "wires": [
      [
        "5cab719f3ee41546"
      ]
    ]
  },
  {
    "id": "3e72bcc008934145",
    "type": "api-call-service",
    "z": "f24803d10ac9bfd3",
    "name": "Call Service Payload Var",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 590,
    "y": 220,
    "wires": [
      []
    ]
  },
  {
    "id": "34e363fa91d35661",
    "type": "api-call-service",
    "z": "f24803d10ac9bfd3",
    "name": "Call Service Payload Var",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "{{payload.data.value}}",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 570,
    "y": 280,
    "wires": [
      []
    ]
  },
  {
    "id": "5cab719f3ee41546",
    "type": "api-call-service",
    "z": "f24803d10ac9bfd3",
    "name": "Call Service Payload Var",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 690,
    "y": 160,
    "wires": [
      []
    ]
  },
  {
    "id": "b7638673e7747203",
    "type": "api-call-service",
    "z": "f24803d10ac9bfd3",
    "name": "Call Service Payload Var",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [],
    "data": "payload.message\t\t",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 290,
    "y": 260,
    "wires": [
      []
    ]
  },
  {
    "id": "f9b6410428c3bcf0",
    "type": "ha-number",
    "z": "f24803d10ac9bfd3",
    "name": "Side 2 Max Dryback",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "c0af415cdad51aa6",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 330,
    "y": 420,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "d0e68eee17431d4d",
    "type": "ha-number",
    "z": "f24803d10ac9bfd3",
    "name": "Side 2 P2 Shot Size",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "3503e29ee90a2700",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 550,
    "y": 420,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "3a08583c766c56f5",
    "type": "ha-number",
    "z": "f24803d10ac9bfd3",
    "name": "Side 2 P1 Shot Size",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "26179060d167c1ab",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 370,
    "y": 480,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "6ac1990ff059a5a4",
    "type": "ha-number",
    "z": "f24803d10ac9bfd3",
    "name": "Side 2 P2 Dryback",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "fe3198f151105d48",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 130,
    "y": 420,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "51bf0cbf4a7a0e77",
    "type": "ha-number",
    "z": "f24803d10ac9bfd3",
    "name": "Side 2 Moisture Target",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "5c396ade052bfdc8",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 140,
    "y": 500,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "4a355626ed6b41b0",
    "type": "api-call-service",
    "z": "e98b0164b89adf68",
    "name": "Call Service Payload Var",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 630,
    "y": 80,
    "wires": [
      []
    ]
  },
  {
    "id": "dd81abb6e490cf3f",
    "type": "function",
    "z": "e98b0164b89adf68",
    "name": "Turn Lights On/Off",
    "func": "const HA_CONFIG = {\n    homeAssistantObject: 'homeassistant.homeAssistant',\n    darkHoursEntity: 'input_number.tent_dark_hours',\n    switchStateEntity: 'switch.tent_light_switch',\n    lightControlEntity: 'switch.tent_light_switch',\n    lightsOnTimeEntity: 'input_datetime.tent_lights_on_time',\n    serviceDomain: 'switch'\n};\n\n// Fetch the Home Assistant object and states\nconst d = global.get(HA_CONFIG.homeAssistantObject);\nlet darkHours = parseFloat(d.states[HA_CONFIG.darkHoursEntity].state);\nlet switchState = d.states[HA_CONFIG.switchStateEntity].state;\nlet lightsOnTime = d.states[HA_CONFIG.lightsOnTimeEntity].state;\nlet debugMode = false;\n\n// Function to log debug messages with labels\nfunction logDebug(label, value) {\n    if (debugMode) {\n        node.warn(label + ' ' + value);\n    }\n}\n\n// Function to toggle debug mode on/off\nfunction toggleDebugMode() {\n    debugMode = !debugMode;\n    if (debugMode) {\n        node.warn('Debug mode is ON');\n    } else {\n        node.warn('Debug mode is OFF');\n    }\n}\n\n// Function to parse time in HH:mm:ss format to seconds\nfunction parseTimeToSeconds(timeStr) {\n    var parts = timeStr.split(':');\n    if (parts.length === 3) {\n        var hours = parseInt(parts[0]);\n        var minutes = parseInt(parts[1]);\n        var seconds = parseInt(parts[2]);\n        return hours * 3600 + minutes * 60 + seconds;\n    } else {\n        // Handle invalid time format if needed\n        node.error('Invalid time format in msg.lightOn');\n        return 0; // Return 0 as a fallback\n    }\n}\n\n// Function to calculate the lights control logic\nfunction calculateLightsControl() {\n    const currentDate = new Date();\n    const currentHours = currentDate.getHours();\n    const currentMinutes = currentDate.getMinutes();\n    const currentSeconds = currentDate.getSeconds();\n    const currentTime = (currentHours * 3600) + (currentMinutes * 60) + currentSeconds;\n    let lightsOnTimeInSeconds = parseTimeToSeconds(lightsOnTime);\n    let lightsOffTimeInSeconds = lightsOnTimeInSeconds + ((24 - darkHours) * 3600);\n\n    if (lightsOffTimeInSeconds >= 86400) {\n        lightsOffTimeInSeconds -= 86400;\n    }\n    \n    logDebug('lightsOnTimeInSeconds:', lightsOnTimeInSeconds);\n    logDebug('lightsOffTimeInSeconds:', lightsOffTimeInSeconds);\n    logDebug('darkHours:', darkHours);\n    logDebug('current time ', currentTime);\n    logDebug('Switch State: ', switchState);\n\n    if (lightsOnTimeInSeconds < lightsOffTimeInSeconds) {\n        if (currentTime >= lightsOnTimeInSeconds && currentTime < lightsOffTimeInSeconds) {\n            if (switchState == 'off') {\n                return turnOnLights();\n            }\n        } else {\n            if (switchState == 'on') {\n                return turnOffLights();\n            }\n        }\n    } else {\n        if (currentTime >= lightsOnTimeInSeconds || currentTime < lightsOffTimeInSeconds) {\n            if (switchState == 'off') {\n                return turnOnLights();\n            }\n        } else {\n            if (switchState == 'on') {\n                return turnOffLights();\n            }\n        }\n    }\n    \n    logDebug('No action needed', '');\n}\n\nfunction turnOnLights() {\n    msg.payload = {\n        service_domain: HA_CONFIG.serviceDomain,\n        service: 'turn_on',\n        entity_id: HA_CONFIG.lightControlEntity\n    };\n    logDebug('Turning on the lights', '');\n    return node.send(msg);\n}\n\nfunction turnOffLights() {\n    msg.payload = {\n        service_domain: HA_CONFIG.serviceDomain,\n        service: 'turn_off',\n        entity_id: HA_CONFIG.lightControlEntity\n    };\n    logDebug('Turning off the lights', '');\n    return node.send(msg);\n}\n\n// Call the calculateLightsControl function to perform the lights control logic\ncalculateLightsControl();\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 390,
    "y": 80,
    "wires": [
      [
        "4a355626ed6b41b0"
      ]
    ]
  },
  {
    "id": "e96535f45c0b0aed",
    "type": "inject",
    "z": "e98b0164b89adf68",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 170,
    "y": 80,
    "wires": [
      [
        "dd81abb6e490cf3f"
      ]
    ]
  },
  {
    "id": "33bbb7b396cb8ece",
    "type": "inject",
    "z": "e98b0164b89adf68",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "180",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 220,
    "wires": [
      [
        "50f9f39cfb6f0f45"
      ]
    ]
  },
  {
    "id": "50f9f39cfb6f0f45",
    "type": "api-call-service",
    "z": "e98b0164b89adf68",
    "name": "",
    "server": "s",
    "version": 5,
    "debugenabled": false,
    "domain": "switch",
    "service": "turn_on",
    "areaId": [],
    "deviceId": [
      "9774f29a7042caa027e13274eb2c2ea0"
    ],
    "entityId": [
      "switch.sonoff_s31_lite_zb_switch_4"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 340,
    "y": 220,
    "wires": [
      [
        "b511607cc755c3a7"
      ]
    ]
  },
  {
    "id": "b511607cc755c3a7",
    "type": "delay",
    "z": "e98b0164b89adf68",
    "name": "",
    "pauseType": "delay",
    "timeout": "60",
    "timeoutUnits": "seconds",
    "rate": "1",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 560,
    "y": 220,
    "wires": [
      [
        "d810eb1a218eae63"
      ]
    ]
  },
  {
    "id": "d810eb1a218eae63",
    "type": "api-call-service",
    "z": "e98b0164b89adf68",
    "name": "",
    "server": "s",
    "version": 5,
    "debugenabled": false,
    "domain": "switch",
    "service": "turn_off",
    "areaId": [],
    "deviceId": [
      "9774f29a7042caa027e13274eb2c2ea0"
    ],
    "entityId": [
      "switch.sonoff_s31_lite_zb_switch_4"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 740,
    "y": 220,
    "wires": [
      []
    ]
  },
  {
    "id": "54825be9f507927b",
    "type": "inject",
    "z": "1f9ff542be636aa9",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 130,
    "y": 80,
    "wires": [
      [
        "b7b40814c4fec103"
      ]
    ]
  },
  {
    "id": "b7b40814c4fec103",
    "type": "function",
    "z": "1f9ff542be636aa9",
    "name": "Feed By WC",
    "func": "/**One thhing of note I use a traditional automation to update my\n * highest soil sensor. I find this is easy just to do through the gui\n */\n\n// Constants for Home Assistant Entity IDs\nconst ENTITY_IDS = {\n    highestSoilSensor: 'input_number.highest_soil_sensor_value_side_1',\n    generative: 'input_boolean.side1_generative_steering',\n    darkHours: 'input_number.side_1_dark_hours',\n    lightOnTime: 'input_datetime.side_1_lights_on_time',\n    soilMoisture: 'sensor.vwc_a2_soil_sensor',\n    maintenancePhase: 'input_boolean.side1_maintance_phase',\n    feedPumpSwitch: 'switch.side_1_feed_pump_switch',\n    p2ShotSize: 'number.side_1_p2_shot_size',\n    p1ShotSize: 'number.side_1_p1_shot_size',\n    maxDelta: 'number.side_1_max_delta',\n    p2Dryback: 'number.side_1_p2_dryback_percentage',\n    targetMoisture: 'number.side_1_desired_moisture'\n};\n\nconst MIN_IRRIGATION_FREQUENCY = 6 * 60; // 10 minutes in seconds\nconst debug = false;\n/**\n * \n * Nothing needs to be changed under this section unless your modifing \n * the basic functionality or how the script works. \n * Modifiy at your own risk\n * \n */\n\n// For retrieving data:\nconst DESIRED_MOISTURE = getHAState(ENTITY_IDS.targetMoisture);\nconst P1_THRESHOLD = 2; //close enough to desired moisture without blowing over\nconst P2_THRESHOLD = getHAState(ENTITY_IDS.p2Dryback);\nconst MAX_DELTA = getHAState(ENTITY_IDS.maxDelta);\nconst DELAY_FOR_P1_FEED = getHAState(ENTITY_IDS.p1ShotSize);\nconst DELAY_FOR_P2_FEED = getHAState(ENTITY_IDS.p2ShotSize);\n\n\n// For retrieving data:\nlet currentTime = getCurrentTime();\nlet currentTimeUTC = getCurrentTimeUTC();\nlet darkHours = parseFloat(getHAState(ENTITY_IDS.darkHours));\nlet generative = getHAState(ENTITY_IDS.generative);\nlet highestSoilsensorVal = getHAState(ENTITY_IDS.highestSoilSensor);\nlet lightOnTime = convertTimeToSecondsUTC(getHAState(ENTITY_IDS.lightOnTime));\nlet maintenancePhase = getHAState(ENTITY_IDS.maintenancePhase);\nlet soilMoisture = parseFloat(getHAState(ENTITY_IDS.soilMoisture));\n\n// Calculate parameters\nconst SECONDS_IN_DAY = 24 * 60 * 60; \nlet lastChangedTimeMs = new Date(global.get('homeassistant').homeAssistant.states[ENTITY_IDS.feedPumpSwitch].last_changed).getTime();\nlet lightOffTime = calculateLightOffTime(darkHours, lightOnTime);\nlet irrigationEnd = calculateIrrigationEnd(lightOffTime);\nlet irrigationStart = calculateIrrigationStart(generative, lightOnTime);\nlet inIrrigationWindow = checkInIrrigationWindow(currentTime, irrigationStart, irrigationEnd);\nlet lastChanged = convert_epoch_to_utc_seconds(lastChangedTimeMs);\nlet moistureDifference = DESIRED_MOISTURE - soilMoisture;\nlet timeSinceLastIrrigation;\n\n//store payloads\nlet delayAndTurnOffOutput = null;\nlet flipBooleanOutput = null;\nlet logOutput = null;\nlet setInputNumberOutput = null;\nlet turnOnOutput = null;\n\n\n//handle midnight crossover\nif (lastChanged < currentTimeUTC) {\n    timeSinceLastIrrigation = Math.floor(currentTimeUTC - lastChanged);\n} else {\n    timeSinceLastIrrigation = Math.floor((SECONDS_IN_DAY - lastChanged) + currentTimeUTC);\n}\n\n/**\n * Constructs a payload for Home Assistant service calls.\n * \n * @param {string} service - The service to be called (e.g., 'turn_on', 'turn_off').\n * @param {string} domain - The domain of the entity (e.g., 'switch', 'light').\n * @param {string} entity_id - The id of the entity to be acted upon.\n * @param {number} delay - The delay in seconds before the action is performed.\n * @param {object} data - Any additional data to be passed along with the service call.\n * @returns {object} - The constructed payload.\n */\nfunction buildPayload(service, domain, entity_id, delay = null, data = {}) {\n    let payload = {\n        service: service,\n        domain: domain,\n        entity_id: entity_id,\n        data: data\n    };\n\n    let message = {\n        payload: payload\n    };\n\n    if (delay !== null) {\n        message.delay = delay * 1000; // Convert seconds to milliseconds\n    }\n\n    return message;\n}\n// Whenever you want to build a payload in your processControlFlow function:\n// const payload = buildPayload('turn_on', 'switch', 'switch.your_p1_feed_id', DELAY_FOR_P1_FEED);\n\n//calculate irrigation end time\nfunction calculateIrrigationEnd(lightOffTime) {\n    if (generative == 'on') {\n        return lightOffTime - 2 * 60 * 60;\n    } else {\n        return lightOffTime - 60 * 60;\n    }\n}\n\n// Function to calculate irrigation start time dynamically based on lights on time\nfunction calculateIrrigationStart(generative, lightOnTime) {\n    let irrigationStart = lightOnTime;\n    if (generative == \"on\") {\n        irrigationStart = irrigationStart + (2 * 60 * 60); // Add 2 hours for generative steering\n    } else {\n        // Use a default start time if generative is not enabled\n        irrigationStart = irrigationStart + (60 * 60); // Add 1 hour\n    }\n    return irrigationStart;\n}\n\n//check for null states\nfunction checkForNullStates() {\n    const requiredStates = [\"highestSoilsensorVal\", \"generative\", \"darkHours\", \"lightOnTime\", \"soilMoisture\", \"maintenancePhase\"];\n\n    const nullStates = requiredStates.filter(state => eval(state) === null);\n\n    if (nullStates.length > 0) {\n        // Log and report each null state\n        nullStates.forEach(state => {\n            const errorMessage = `ERROR: ${state} is null`;\n            logOutput = logbookMsg(errorMessage);\n\n            // Create a persistent notification in Home Assistant\n            const persistentError = buildPayload('create', 'persistent_notification', '', null, { message: errorMessage, title: 'Irrigation System'});\n            node.send([null,null,null,null, persistentError]);\n        });\n        return true;\n    }\n}\n\n//converts lastchangems to seconds\nfunction convert_epoch_to_utc_seconds(epoch_ms) {\n    const epoch_seconds = epoch_ms / 1000;\n    const seconds_into_day_utc = Math.floor(epoch_seconds % SECONDS_IN_DAY);\n    return seconds_into_day_utc;\n}\n\n// Function to convert a time string in the format HH:MM:SS to seconds from midnight\nfunction convertTimeToSecondsUTC(timeString) {\n    // Split the time string by ':' to get hours, minutes, and seconds\n    const parts = timeString.split(':');\n    const hours = parseInt(parts[0], 10);\n    const minutes = parseInt(parts[1], 10);\n    const seconds = parseInt(parts[2], 10);\n\n    // Calculate the total number of seconds from midnight\n    return hours * 3600 + minutes * 60 + seconds;\n}\n\n// Function to calculate light off time dynamically based on dark hours\nfunction calculateLightOffTime(darkHours, lightOnTime) {\n    let lightDuration = (24 - darkHours) * 60 * 60; // Calculate light duration based on dark hours\n    let lightOffTime = (lightOnTime + lightDuration) % SECONDS_IN_DAY; // Adjust for midnight crossover\n\n    return lightOffTime;\n}\n\n// Function to check if the current time is within the irrigation window\nfunction checkInIrrigationWindow(currentTime, irrigationStart, irrigationEnd) {\n    // Normalize times to a 24-hour cycle to handle cases where times span across midnight\n    currentTime = currentTime % SECONDS_IN_DAY;\n    irrigationStart = irrigationStart % SECONDS_IN_DAY;\n    irrigationEnd = irrigationEnd % SECONDS_IN_DAY;\n\n    if (irrigationStart < irrigationEnd) {\n        // The irrigation window does not span midnight\n        return currentTime >= irrigationStart && currentTime < irrigationEnd;\n    } else {\n        // The irrigation window spans midnight\n        // currentTime must be either after irrigationStart on the same day or before irrigationEnd on the next day\n        return currentTime >= irrigationStart || currentTime < irrigationEnd;\n    }\n}\n\n\n// Function to get current time in seconds\nfunction getCurrentTime() {\n    const now = new Date();\n    return now.getSeconds() + (60 * (now.getMinutes() + 60 * now.getHours()));\n}\n\n// Function to get current time in UTC seconds\nfunction getCurrentTimeUTC() {\n    const now = new Date();\n    const utcSeconds = (now.getUTCHours() * 3600) + (now.getUTCMinutes() * 60) + now.getUTCSeconds();\n    return utcSeconds;\n}\n\n// Function to retrieve state from Home Assistant\nfunction getHAState(state) {\n    // Check if the states object and the specific state exist\n    if (global.get('homeassistant') && global.get('homeassistant').homeAssistant\n        && global.get('homeassistant').homeAssistant.states\n        && global.get('homeassistant').homeAssistant.states[state]) {\n        return global.get('homeassistant').homeAssistant.states[state].state;\n    } else {\n        // Handle the case where the state or any parent object is undefined\n        node.warn(\"State not found or global object is undefined: \" + state);\n        return null; // or you can throw an error or return a default value\n    }\n}\n\n\n// Enhanced logging for debugging\nfunction logDebugData() {\n    if (debug) {\n        node.warn(\"Is in irrigation window? \" + inIrrigationWindow);\n        node.warn(\"Generative: \" + generative);\n        node.warn('Maintance Phase: '+ maintenancePhase)\n        node.warn(\"Dark Hours: \" + darkHours);\n        node.warn(\"Soil moisture: \" + soilMoisture);\n        node.warn(\"last Irrigation Run \" + utcMsToLocalHHMMSS(lastChangedTimeMs));\n        node.warn(\"Highest Sensor Value: \" + highestSoilsensorVal);\n        // Additional logging to help with debugging\n        node.warn(\"Moisture Difference: \" + moistureDifference);\n        node.warn(\"timeSinceLastIrrigation: \" + toHHMMSS(timeSinceLastIrrigation));\n        node.warn(\"Current Time: \" + new Date(currentTime * 1000).toISOString().substr(11, 8));\n        node.warn(\"Irrigation Start: \" + new Date(irrigationStart * 1000).toISOString().substr(11, 8));\n        node.warn(\"Irrigation End: \" + new Date(irrigationEnd * 1000).toISOString().substr(11, 8));\n    }\n}\n\n\n//function to make logbook entries\nfunction logbookMsg(message) {\n    \n    // Create a message object with the payload for the api-call-service node\n    const logMessage = {\n        payload: {\n            service_domain: 'logbook',\n            service: 'log',\n            data: {\n            entity_id: ENTITY_IDS.feedPumpSwitch,\n            name: \"Irrigation System\",\n            message: message\n            }\n        }\n    };\n\n    return logMessage;\n}\n\n//check for min time between irrigation\nfunction minStopTime() {\n    if (timeSinceLastIrrigation < MIN_IRRIGATION_FREQUENCY) {\n        logOutput = logbookMsg(`Last irrigation was less than ${MIN_IRRIGATION_FREQUENCY / 60} minutes ago. Not performing a check now.`);\n        node.send([null,null,null,null, logOutput]);\n        return true;\n    }\nreturn false;\n}\n\n//check for max dryback\nfunction maxDrybackCheck() {\n    if (moistureDifference > MAX_DELTA) {\n        logOutput = logbookMsg(\"Max Dryback Feeding\");\n        turnOnOutput = buildPayload('turn_on', 'switch', ENTITY_IDS.feedPumpSwitch);\n        delayAndTurnOffOutput = buildPayload('turn_off', 'switch', ENTITY_IDS.feedPumpSwitch, DELAY_FOR_P2_FEED);\n        node.send([turnOnOutput, delayAndTurnOffOutput, null, null, logOutput]);\n        return true;\n    }\nreturn false;\n}\n//reset maintenance phase if outside irrigation window and it is on\nfunction resetMaintenancePhase() {\n    if (!inIrrigationWindow && maintenancePhase != 'off') {\n        logOutput = logbookMsg(\"Resetting Maintenance Switch\");\n        flipBooleanOutput = buildPayload('turn_off', 'input_boolean', ENTITY_IDS.maintenancePhase);\n        node.send([null, null, flipBooleanOutput, null, logOutput]);\n    }\nreturn false;\n}\n\n//reset highest soil sensor at beginging of lights on\nfunction setMaxSoilSensorTracker() {\n    //node.warn(\"set soil warn\" + (currentTime -lightOnTime))\n    //reset highest soil value sensor at beginging of lights on\n    if (Math.abs(currentTime - lightOnTime) <= 60) {\n        logOutput = logbookMsg(\"Flipping Highest Soil Sensor to 0\");\n        setInputNumberOutput = buildPayload('set_value', 'input_number', ENTITY_IDS.highestSoilSensor, null, { value: 0 });\n        node.send([null, null, null, setInputNumberOutput, logOutput]);\n        return true;\n    }\nreturn false;\n}\n\n//switch maintenance phase if in irrigation window and desired moisture is reached\nfunction switchMaintenancePhase() {\n    if (maintenancePhase == 'off' && inIrrigationWindow) {\n        if (highestSoilsensorVal >= DESIRED_MOISTURE) {\n            logOutput = logbookMsg('P2 Flip Switch Desired Moisture Reached');\n            flipBooleanOutput = buildPayload('turn_on', 'input_boolean', ENTITY_IDS.maintenancePhase);\n            node.send ([null, null, flipBooleanOutput, null, logOutput]);\n            return true;\n        }\n    }\nreturn false;\n}\n//convert seconds to HH:MM:SS for output only\nfunction toHHMMSS(timeSeconds) {\n    const sec = parseInt(timeSeconds, 10); // convert value to number if it's string\n    let hours = Math.floor(sec / 3600); // get hours\n    let minutes = Math.floor((sec - (hours * 3600)) / 60); // get minutes\n    let seconds = sec - (hours * 3600) - (minutes * 60); // get seconds\n\n    // add 0 if value < 10; Example: 2 -> 02\n    if (hours < 10) { hours = \"0\" + hours; }\n    if (minutes < 10) { minutes = \"0\" + minutes; }\n    if (seconds < 10) { seconds = \"0\" + seconds; }\n\n    return hours + ':' + minutes + ':' + seconds; // Return is HH : MM : SS\n}\n\n//convert utc ms to local time HH:MM:SS\nfunction utcMsToLocalHHMMSS(utcMs) {\n    var date = new Date(utcMs);\n    return date.toLocaleTimeString('en-US', { hour12: false });\n}\n//run p1 and p2 feeds\nfunction processControlFlow() {\n    if (maintenancePhase == 'off' && moistureDifference > P1_THRESHOLD) {\n        logOutput = logbookMsg('P1 feed');\n        turnOnOutput = buildPayload('turn_on', 'switch', ENTITY_IDS.feedPumpSwitch);\n        delayAndTurnOffOutput = buildPayload('turn_off', 'switch', ENTITY_IDS.feedPumpSwitch, DELAY_FOR_P1_FEED);\n        node.send([turnOnOutput, delayAndTurnOffOutput, null, null, logOutput]);\n    } else if ( maintenancePhase == 'on' && moistureDifference > P2_THRESHOLD) {\n        logOutput = logbookMsg('P2 feed');\n        turnOnOutput = buildPayload('turn_on', 'switch', ENTITY_IDS.feedPumpSwitch);\n        delayAndTurnOffOutput = buildPayload('turn_off', 'switch', ENTITY_IDS.feedPumpSwitch, DELAY_FOR_P2_FEED);\n        node.send ([turnOnOutput, delayAndTurnOffOutput, null, null, logOutput]);\n    }\n}\n\nlogDebugData();\ncheckForNullStates();\nsetMaxSoilSensorTracker();\nswitchMaintenancePhase();\nif (!minStopTime()) {\n    if (!maxDrybackCheck()) {\n        if (inIrrigationWindow) {\n            processControlFlow();\n        }\n    }   \n}\nresetMaintenancePhase();",
    "outputs": 5,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 310,
    "y": 80,
    "wires": [
      [
        "fe7d6789a0b7ad4f"
      ],
      [
        "421bf29ad54d9896"
      ],
      [
        "275ecd72a1b51e2a"
      ],
      [
        "2a99fbe644e176ea"
      ],
      [
        "c9ca6bdec3227eb4"
      ]
    ],
    "outputLabels": [
      "Turn On Feed",
      "Turn Off Feed",
      "Flip Input Boolean",
      "Set Highest Value Back",
      "Log To Logbook"
    ]
  },
  {
    "id": "d761f5c21d0e19d0",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Turn pump off",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 680,
    "y": 80,
    "wires": [
      []
    ]
  },
  {
    "id": "275ecd72a1b51e2a",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Flip maintaince Switch",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 680,
    "y": 140,
    "wires": [
      []
    ]
  },
  {
    "id": "421bf29ad54d9896",
    "type": "delay",
    "z": "1f9ff542be636aa9",
    "name": "",
    "pauseType": "delayv",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1000",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 500,
    "y": 60,
    "wires": [
      [
        "d761f5c21d0e19d0"
      ]
    ]
  },
  {
    "id": "2a99fbe644e176ea",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Reset Max Soil Tracker",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "{{payload.data.value}}",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 710,
    "y": 200,
    "wires": [
      []
    ]
  },
  {
    "id": "8bae16071e2c879d",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Call Service Payload Var",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 690,
    "y": 400,
    "wires": [
      []
    ]
  },
  {
    "id": "de78abd16fcaf98d",
    "type": "function",
    "z": "1f9ff542be636aa9",
    "name": "Turn Lights On/Off",
    "func": "const HA_CONFIG = {\n    homeAssistantObject: 'homeassistant.homeAssistant',\n    darkHoursEntity: 'input_number.side_1_dark_hours',\n    switchStateEntity: 'switch.side_1_grow_light',\n    lightsOnTimeEntity: 'input_datetime.side_1_lights_on_time',\n    lightControlEntity: 'switch.side_1_grow_light',\n    serviceDomain: 'switch'\n};\n\n// Fetch the Home Assistant object and states\nconst d = global.get(HA_CONFIG.homeAssistantObject);\nlet darkHours = parseFloat(d.states[HA_CONFIG.darkHoursEntity].state);\nlet switchState = d.states[HA_CONFIG.switchStateEntity].state;\nlet lightsOnTime = d.states[HA_CONFIG.lightsOnTimeEntity].state;\nlet debugMode = false;\n\n// Function to log debug messages with labels\nfunction logDebug(label, value) {\n    if (debugMode) {\n        node.warn(label + ' ' + value);\n    }\n}\n\n// Function to toggle debug mode on/off\nfunction toggleDebugMode() {\n    debugMode = !debugMode;\n    if (debugMode) {\n        node.warn('Debug mode is ON');\n    } else {\n        node.warn('Debug mode is OFF');\n    }\n}\n\n// Function to parse time in HH:mm:ss format to seconds\nfunction parseTimeToSeconds(timeStr) {\n    var parts = timeStr.split(':');\n    if (parts.length === 3) {\n        var hours = parseInt(parts[0]);\n        var minutes = parseInt(parts[1]);\n        var seconds = parseInt(parts[2]);\n        return hours * 3600 + minutes * 60 + seconds;\n    } else {\n        // Handle invalid time format if needed\n        node.error('Invalid time format in msg.lightOn');\n        return 0; // Return 0 as a fallback\n    }\n}\n\n// Function to calculate the lights control logic\nfunction calculateLightsControl() {\n    const currentDate = new Date();\n    const currentHours = currentDate.getHours();\n    const currentMinutes = currentDate.getMinutes();\n    const currentSeconds = currentDate.getSeconds();\n    const currentTime = (currentHours * 3600) + (currentMinutes * 60) + currentSeconds;\n    let lightsOnTimeInSeconds = parseTimeToSeconds(lightsOnTime);\n    let lightsOffTimeInSeconds = lightsOnTimeInSeconds + ((24 - darkHours) * 3600);\n\n    if (lightsOffTimeInSeconds >= 86400) {\n        lightsOffTimeInSeconds -= 86400;\n    }\n    \n    logDebug('lightsOnTimeInSeconds:', lightsOnTimeInSeconds);\n    logDebug('lightsOffTimeInSeconds:', lightsOffTimeInSeconds);\n    logDebug('darkHours:', darkHours);\n    logDebug('current time ', currentTime);\n    logDebug('Switch State: ', switchState);\n\n    if (lightsOnTimeInSeconds < lightsOffTimeInSeconds) {\n        if (currentTime >= lightsOnTimeInSeconds && currentTime < lightsOffTimeInSeconds) {\n            if (switchState == 'off') {\n                return turnOnLights();\n            }\n        } else {\n            if (switchState == 'on') {\n                return turnOffLights();\n            }\n        }\n    } else {\n        if (currentTime >= lightsOnTimeInSeconds || currentTime < lightsOffTimeInSeconds) {\n            if (switchState == 'off') {\n                return turnOnLights();\n            }\n        } else {\n            if (switchState == 'on') {\n                return turnOffLights();\n            }\n        }\n    }\n    \n    logDebug('No action needed', '');\n}\n\nfunction turnOnLights() {\n    msg.payload = {\n        service_domain: HA_CONFIG.serviceDomain,\n        service: 'turn_on',\n        entity_id: HA_CONFIG.lightControlEntity\n    };\n    logDebug('Turning on the lights', '');\n    return node.send(msg);\n}\n\nfunction turnOffLights() {\n    msg.payload = {\n        service_domain: HA_CONFIG.serviceDomain,\n        service: 'turn_off',\n        entity_id: HA_CONFIG.lightControlEntity\n    };\n    logDebug('Turning off the lights', '');\n    return node.send(msg);\n}\n\n// Call the calculateLightsControl function to perform the lights control logic\ncalculateLightsControl();\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 430,
    "y": 420,
    "wires": [
      [
        "8bae16071e2c879d"
      ]
    ]
  },
  {
    "id": "37b0051a43b92ca0",
    "type": "inject",
    "z": "1f9ff542be636aa9",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 210,
    "y": 400,
    "wires": [
      [
        "de78abd16fcaf98d"
      ]
    ]
  },
  {
    "id": "bfb98f41064fa6ac",
    "type": "inject",
    "z": "1f9ff542be636aa9",
    "d": true,
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 130,
    "y": 780,
    "wires": [
      [
        "e7d9d30424f40fe0",
        "7bc3bd98629028b5"
      ]
    ]
  },
  {
    "id": "e7d9d30424f40fe0",
    "type": "function",
    "z": "1f9ff542be636aa9",
    "d": true,
    "name": "Control Humidifer",
    "func": "// Get the Home Assistant object\nconst d = global.get('homeassistant').homeAssistant;\nlet side1Rh = d.states[\"sensor.grow_side1_table_humidity\"].state;\nlet requiredRh = d.states[\"sensor.required_rh_for_desired_kpa_side_1\"].state;\nlet humidifierState = d.states[\"switch.garden_humidifer_side_1\"].state;\nlet entityId = 'switch.garden_humidifer_side_1'; \nlet delta = 5;\nlet debugMode = false;\n\n// Function to log debug messages with labels\nfunction logDebug(label, value) {\n    if (debugMode) {\n        node.warn(label + ' ' + value);\n    }\n}\n\n// Function to toggle debug mode on/off\nfunction toggleDebugMode() {\n    debugMode = !debugMode;\n    if (debugMode) {\n        node.warn('Debug mode is ON');\n    } else {\n        node.warn('Debug mode is OFF');\n    }\n}\n\n// Check if the humidity difference is less than or equal to -delta (below required level)\nif (humidifierState == \"off\" && requiredRh - side1Rh >= delta) {\n    // Create an object with service, domain, and entity_id\n    const payload = {\n        service: 'turn_on',\n        domain: 'switch',\n        entity_id: entityId\n    };\n    // Set the msg.payload to the created object\n    msg.payload = payload;\n    // Send the message to the next node in the flow\n    return msg;\n} else if (humidifierState == \"on\" && side1Rh >= requiredRh) {\n    // Create an object with service, domain, and entity_id\n    const payload = {\n        service: 'turn_off',\n        domain: 'switch',\n        entity_id: entityId\n    };\n    // Set the msg.payload to the created object\n    msg.payload = payload;\n    // Send the message to the next node in the flow\n    return msg;\n} else {\n    // Log a debug message indicating no action was taken\n    logDebug('Humidifier', 'No action taken');\n}\n\n// Log the variables using logDebug\nlogDebug('side1Rh, requiredRh', [side1Rh, requiredRh]);\n//logDebug('requiredRh', requiredRh);\nlogDebug('humidifierState', humidifierState);\nlogDebug('delta', delta);\nlogDebug('debugMode', debugMode);\nlogDebug('sideRh - required', (side1Rh - requiredRh))",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 330,
    "y": 760,
    "wires": [
      [
        "c5feec787802fbfb"
      ]
    ]
  },
  {
    "id": "c5feec787802fbfb",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "d": true,
    "name": "Call Service Payload Var",
    "server": "s",
    "version": 5,
    "debugenabled": false,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 590,
    "y": 760,
    "wires": [
      []
    ]
  },
  {
    "id": "7bc3bd98629028b5",
    "type": "function",
    "z": "1f9ff542be636aa9",
    "d": true,
    "name": "Control Dehumidifer",
    "func": "// Get the Home Assistant object\nconst d = global.get('homeassistant').homeAssistant;\nlet side1Rh = d.states[\"sensor.grow_side1_table_humidity\"].state;\nlet requiredRh = d.states[\"sensor.required_rh_for_desired_kpa_side_1\"].state;\nlet dehumidifierState = d.states[\"switch.side1_dehumidifer\"].state;\nlet entityId = 'switch.side1_dehumidifer';\nlet delta = 2;\nlet debugMode = false;\n\n// Function to log debug messages with labels\nfunction logDebug(label, value) {\n    if (debugMode) {\n        node.warn(label + ' ' + value);\n    }\n}\n\n// Function to toggle debug mode on/off\nfunction toggleDebugMode() {\n    debugMode = !debugMode;\n    if (debugMode) {\n        node.warn('Debug mode is ON');\n    } else {\n        node.warn('Debug mode is OFF');\n    }\n}\n\n// Check if the humidity difference is less than or equal to -delta (below required level)\nif (dehumidifierState == \"off\" && side1Rh - requiredRh >= delta) {\n    // Create an object with service, domain, and entity_id\n    const payload = {\n        service: 'turn_on',\n        domain: 'switch',\n        entity_id: entityId\n    };\n    // Set the msg.payload to the created object\n    msg.payload = payload;\n    // Send the message to the next node in the flow\n    return msg;\n} else if (dehumidifierState == \"on\" && requiredRh - side1Rh >= delta) {\n    // Create an object with service, domain, and entity_id\n    const payload = {\n        service: 'turn_off',\n        domain: 'switch',\n        entity_id: entityId\n    };\n    // Set the msg.payload to the created object\n    msg.payload = payload;\n    // Send the message to the next node in the flow\n    return msg;\n} else {\n    // Log a debug message indicating no action was taken\n    logDebug('Dehumidifier', 'No action taken');\n}\n\n// Log the variables using logDebug\nlogDebug('side1Rh, requiredRh', [side1Rh, requiredRh]);\n//logDebug('requiredRh', requiredRh);\nlogDebug('dehumidifierState', dehumidifierState);\nlogDebug('delta', delta);\nlogDebug('debugMode', debugMode);\nlogDebug('rh - required', (side1Rh - requiredRh))",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 340,
    "y": 840,
    "wires": [
      []
    ]
  },
  {
    "id": "f2abd8602246cfed",
    "type": "function",
    "z": "1f9ff542be636aa9",
    "name": "Room Fan Exhuast",
    "func": "const HA_CONFIG = {\n    homeAssistantObject: 'homeassistant.homeAssistant',\n    temperatureEntity: 'number.side_1_max_temp',\n    controlEntity: 'light.grow_side_1_exhaust',\n    roomTempEntity: 'sensor.grow_side1_table_temperature',\n    humidityEntity: 'sensor.grow_side1_table_humidity',\n    maxHumidityEntity: 'sensor.required_rh_for_desired_kpa_side_1',\n    serviceDomain: 'light'\n};\n\nlet debugMode = true;\n\n// Fetching state data from Home Assistant\nconst haObject = global.get(HA_CONFIG.homeAssistantObject);\nconst roomTempState = haObject?.states[HA_CONFIG.roomTempEntity]?.state;\nconst humidityState = haObject?.states[HA_CONFIG.humidityEntity]?.state;\nconst maxTemp = parseFloat(haObject?.states[HA_CONFIG.temperatureEntity]?.state);\nconst maxHumidity = parseFloat(haObject?.states[HA_CONFIG.maxHumidityEntity]?.state);\nconst switchState = msg.state;\n\n// Function to log debug messages with labels and state values\nfunction logDebug(label, trigger, states) {\n    if (debugMode) {\n        let debugMessage = label + ' Trigger: ' + trigger;\n        if (states) {\n            Object.entries(states).forEach(([key, value]) => {\n                debugMessage += `, ${key}: ${value}`;\n            });\n        }\n        node.warn(debugMessage);\n    }\n}\n\n// Function to calculate the lights control logic based on temperature and humidity\nfunction calculateLightsControlBasedOnTemperatureAndHumidity(roomTempState, humidityState, switchState) {\n    if (maxTemp === null || maxHumidity === null || roomTempState === null || humidityState === null || switchState === null) {\n        logDebug('One or more essential states could not be fetched', '', {\n            roomTempState,\n            humidityState,\n            maxTemp,\n            maxHumidity,\n            switchState\n        });\n        return; // Return early if essential state data is missing\n    }\n\n    const humidityThreshold = maxHumidity + 15;\n\n    // Check switch state\n    if (switchState === 'off') {\n        // If humidity is above threshold and lights are off, turn on the lights\n        if (humidityState > humidityThreshold) {\n            logDebug(\"RH Turn On\", \"Humidity\", {\n                roomTempState,\n                humidityState,\n                maxTemp,\n                maxHumidity,\n                switchState\n            });\n            return turnOnLights();\n        // If temperature is above max threshold and lights are off, turn on the lights\n        } else if (roomTempState > maxTemp) {\n            logDebug(\"Temp Turn On\", \"Temperature\", {\n                roomTempState,\n                humidityState,\n                maxTemp,\n                maxHumidity,\n                switchState\n            });\n            return turnOnLights();\n        }\n    } else if (switchState === 'on') {\n        // If lights are on and both temperature and humidity are within limits, turn off the lights\n        if (roomTempState <= maxTemp && humidityState <= humidityThreshold) {\n            logDebug('Turn off both metrics below max', '', {\n                roomTempState,\n                humidityState,\n                maxTemp,\n                maxHumidity,\n                switchState\n            });\n            return turnOffLights();\n        }\n    }\n\n    logDebug('No action needed based on temperature and humidity', '', {\n        roomTempState,\n        humidityState,\n        maxTemp,\n        maxHumidity,\n        switchState\n    });\n}\n\n// Function to turn on the lights\nfunction turnOnLights() {\n    msg.payload = {\n        service_domain: HA_CONFIG.serviceDomain,\n        service: 'turn_on',\n        entity_id: HA_CONFIG.controlEntity,\n        data: { brightness: 255 }\n    };\n    logDebug('Turning on the Room Exhaust', 'Triggered by: ' + HA_CONFIG.controlEntity, {\n        roomTempState,\n        humidityState,\n        maxTemp,\n        maxHumidity,\n        switchState\n    });\n    node.send(msg);\n}\n\n// Function to turn off the lights\nfunction turnOffLights() {\n    msg.payload = {\n        service_domain: HA_CONFIG.serviceDomain,\n        service: 'turn_on',\n        entity_id: HA_CONFIG.controlEntity,\n        data: { brightness: 0 }\n    };\n    logDebug('Turning off the Room Exhaust', 'Triggered by: ' + HA_CONFIG.controlEntity, {\n        roomTempState,\n        humidityState,\n        maxTemp,\n        maxHumidity,\n        switchState\n    });\n    node.send(msg);\n}\n\n// Check if essential state data is fetched successfully\nif (roomTempState !== null && humidityState !== null && switchState !== null) {\n    // Calculate lights control based on fetched state data\n    calculateLightsControlBasedOnTemperatureAndHumidity(roomTempState, humidityState, switchState);\n} else {\n    // Log an error if essential state data is missing\n    logDebug('One or more essential states could not be fetched', '', {\n        roomTempState,\n        humidityState,\n        maxTemp,\n        maxHumidity,\n        switchState\n    });\n}\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 530,
    "y": 700,
    "wires": [
      [
        "650a9ceea54df8da"
      ]
    ]
  },
  {
    "id": "650a9ceea54df8da",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Call Service Payload Var",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "light.grow_side_1_exhuast"
    ],
    "data": "{{payload.data.brightness}}",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 770,
    "y": 700,
    "wires": [
      []
    ]
  },
  {
    "id": "ec403ab5ffe12e9f",
    "type": "inject",
    "z": "1f9ff542be636aa9",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "300",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 110,
    "y": 700,
    "wires": [
      [
        "4a8c66f5bc470750"
      ]
    ]
  },
  {
    "id": "c9ca6bdec3227eb4",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Send Logbook Msg",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [],
    "data": "payload.message\t\t",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 370,
    "y": 180,
    "wires": [
      []
    ]
  },
  {
    "id": "fe7d6789a0b7ad4f",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Turn Pump On",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "payload.message",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 680,
    "y": 20,
    "wires": [
      []
    ]
  },
  {
    "id": "a062f82c0f9a8c79",
    "type": "inject",
    "z": "1f9ff542be636aa9",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 300,
    "wires": [
      [
        "5357893a6f06d5d4"
      ]
    ]
  },
  {
    "id": "5357893a6f06d5d4",
    "type": "function",
    "z": "1f9ff542be636aa9",
    "name": "Turn Heater on/off",
    "func": "/**One thhing of note I use a traditional automation to update my\n * highest soil sensor. I find this is easy just to do through the gui\n */\n\n// Constants for Home Assistant Entity IDs\nconst ENTITY_IDS = {\n    heaterPumpSwitch: 'switch.sonoff_10018007fd_1',\n    minLightsOnTemp: 'input_number.side1_min_lights_on_temp',\n    minLightsOffTemp: 'input_number.side1_min_lights_off_temp',\n    roomTempSensor: 'sensor.grow_side1_table_temperature',\n    lightOnTime: 'input_datetime.side_1_lights_on_time',\n    darkHours: 'input_number.side_1_dark_hours',\n};\n\nconst delta= 1;  //delta before turning on heater\nconst debug = false;\n\n\n// For retrieving data:\nlet roomTempSensor = getHAState(ENTITY_IDS.roomTempSensor);\nlet minLightsOnTemp = getHAState(ENTITY_IDS.minLightsOnTemp);\nlet minLightsOffTemp = getHAState(ENTITY_IDS.minLightsOffTemp);\nlet heaterPumpSwitch = getHAState(ENTITY_IDS.heaterPumpSwitch);\nlet lightOnTime = getHAState(ENTITY_IDS.lightOnTime);\nlet darkHours = getHAState(ENTITY_IDS.darkHours);\n\n/**\n * \n * Nothing needs to be changed under this section unless your modifing \n * the basic functionality or how the script works. \n * Modifiy at your own risk\n * \n */\n\n// Function to retrieve state from Home Assistant\nfunction getHAState(state) {\n    // Check if the states object and the specific state exist\n    if (global.get('homeassistant') && global.get('homeassistant').homeAssistant\n        && global.get('homeassistant').homeAssistant.states\n        && global.get('homeassistant').homeAssistant.states[state]) {\n        return global.get('homeassistant').homeAssistant.states[state].state;\n    } else {\n        // Handle the case where the state or any parent object is undefined\n        node.warn(\"State not found or global object is undefined: \" + state);\n        return null; // or you can throw an error or return a default value\n    }\n}\n\n//check for null states\nfunction checkForNullStates() {\n    let nullStates = [];\n\n    if (roomTempSensor === null) nullStates.push(\"RoomTempSensor\");\n    if (heaterPumpSwitch === null) nullStates.push(\"heaterPumpSwitch\");\n    if (minLightsOnTemp === null) nullStates.push(\"minLightsOnTemp\");\n    if (minLightsOffTemp === null) nullStates.push(\"minLightsOffTemp\");\n    if (lightOnTime === null) nullStates.push(\"lightOnTime\");\n    if (darkHours === null) nullStates.push(\"darkHours\");\n    return nullStates; // Returns an array of null state names, empty if none are null\n}\n\n\n\n\n// Enhanced logging for debugging\nfunction logDebugData() {\n    if (debug) {\n        node.warn(\"Room Temp Sensor: \" + roomTempSensor); //room temp\n        node.warn(\"Heater Pump Switch: \" + heaterPumpSwitch);\n        node.warn(\"Min Lights On Temp: \" + minLightsOnTemp);\n        node.warn(\"Min Lights Off Temp: \" + minLightsOffTemp);\n        node.warn(\"Light On Time: \" + lightOnTime);\n        node.warn(\"Dark Hours: \" + darkHours);\n        node.warn(\"Is Lights On Time: \" + checkLightsOnTime());\n    }\n}\n\n//function to make logbook entries\nfunction logbookMsg(message) {\n    \n    // Create a message object with the payload for the api-call-service node\n    const logMessage = {\n        payload: {\n            service_domain: 'logbook',\n            service: 'log',\n            data: {\n            entity_id: ENTITY_IDS.heaterPumpSwitch,\n            name: \"Heater Control System\",\n            message: message\n            }\n        }\n    };\n\n    return logMessage;\n}\n\n\n/**\n * Constructs a payload for Home Assistant service calls.\n * \n * @param {string} service - The service to be called (e.g., 'turn_on', 'turn_off').\n * @param {string} domain - The domain of the entity (e.g., 'switch', 'light').\n * @param {string} entity_id - The id of the entity to be acted upon.\n * @param {number} delay - The delay in seconds before the action is performed.\n * @param {object} data - Any additional data to be passed along with the service call.\n * @returns {object} - The constructed payload.\n */\nfunction buildPayload(service, domain, entity_id, delay = null, data = {}) {\n    let payload = {\n        service: service,\n        domain: domain,\n        entity_id: entity_id,\n        data: data\n    };\n\n    let message = {\n        payload: payload\n    };\n\n    if (delay !== null) {\n        message.delay = delay * 1000; // Convert seconds to milliseconds\n    }\n\n    return message;\n}\n\nfunction checkLightsOnTime() {\n    let currentTime = new Date();\n    let currentMinutes = currentTime.getHours() * 60 + currentTime.getMinutes();\n\n    // Convert lightOnTime and darkHours to minutes since midnight\n    let [onHours, onMinutes] = lightOnTime.split(':').map(Number);\n    let lightOnMinutes = onHours * 60 + onMinutes;\n    let darkMinutes = darkHours * 60;\n\n    // Calculate light off time in minutes since midnight\n    let lightOffMinutes = lightOnMinutes + darkMinutes;\n\n    // Adjust light off time for crossing midnight\n    lightOffMinutes = lightOffMinutes % 1440;\n\n    // Check if current time is within the lights on period\n    if (lightOnMinutes <= lightOffMinutes) {\n        // Scenario where light on and off times are within the same day\n        return currentMinutes >= lightOnMinutes && currentMinutes < lightOffMinutes;\n    } else {\n        // Scenario where light on time is today and off time is tomorrow\n        return currentMinutes >= lightOnMinutes || currentMinutes < lightOffMinutes;\n    }\n}\n\n\nfunction decideHeaterAction(currentTemp, desiredTemp, heaterState) {\n    if (currentTemp < desiredTemp - delta && heaterState === 'off') {\n        return 'turn_on';\n    } else if (currentTemp >= desiredTemp && heaterState === 'on') {\n        return 'turn_off';\n    }\n    return null;\n}\nfunction generateLogMessage(type, details) {\n    if (type === 'error') {\n        return `ERROR: ${details} is null`;\n    } else if (type === 'action') {\n        const { action, currentTemp, desiredTemp } = details;\n        if (action === 'turn_on') {\n            return `Heater Turned On - Room Temp: ${currentTemp}, Desired Temp: ${desiredTemp}`;\n        } else if (action === 'turn_off') {\n            return `Heater Turned Off - Room Temp: ${currentTemp}, Desired Temp: ${desiredTemp}`;\n        }\n    }\n    return 'No action required';\n}\n\nfunction processControlFlow() {\n    const nullStates = checkForNullStates();\n    let logOutput = null;\n\n    if (nullStates.length > 0) {\n        nullStates.forEach(state => {\n            let errorMessage = generateLogMessage('error', state);\n            logOutput = logbookMsg(errorMessage);\n            let persistentError = buildPayload('create', 'persistent_notification', '', null, { message: errorMessage, title: 'Heating System Error'});\n            node.send([null, persistentError]);\n        });\n        return null;\n    }\n\n    let desiredTemp = checkLightsOnTime() ? minLightsOnTemp : minLightsOffTemp;\n    let action = decideHeaterAction(roomTempSensor, desiredTemp, heaterPumpSwitch);\n\n    if (action) {\n        let actionDetails = { action, currentTemp: roomTempSensor, desiredTemp };\n        let actionMessage = generateLogMessage('action', actionDetails);\n        logOutput = logbookMsg(actionMessage);\n        let operateHeater = buildPayload(action, 'switch', ENTITY_IDS.heaterPumpSwitch);\n\n        node.send([operateHeater, logOutput]);\n    }\n}\nprocessControlFlow();\nlogDebugData();",
    "outputs": 2,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 300,
    "wires": [
      [
        "6e8aa3a4a2702ed2"
      ],
      [
        "f78bb0f1e7629ee8"
      ]
    ]
  },
  {
    "id": "6e8aa3a4a2702ed2",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Do action",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "payload.message",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 580,
    "y": 280,
    "wires": [
      []
    ]
  },
  {
    "id": "f78bb0f1e7629ee8",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Send Logbook Msg",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [],
    "data": "payload.message\t\t",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 590,
    "y": 340,
    "wires": [
      []
    ]
  },
  {
    "id": "dbdc936883e1628f",
    "type": "ha-number",
    "z": "1f9ff542be636aa9",
    "name": "Side 1 Max Delta",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "2ee22e47a8eab437",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 160,
    "y": 560,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "953472c2dbcdf926",
    "type": "ha-number",
    "z": "1f9ff542be636aa9",
    "name": "Side 1 Desired Moisture",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "4169597fa49cd85b",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 380,
    "y": 560,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "5c25501d1b9970b0",
    "type": "ha-number",
    "z": "1f9ff542be636aa9",
    "name": "Side 1 P1 Shot Size",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "c0f8954daaa16b78",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 590,
    "y": 560,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "ca49ada6308afae5",
    "type": "ha-number",
    "z": "1f9ff542be636aa9",
    "name": "Side 1 P2 Shot Size",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "fd7c1408eb42699d",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 190,
    "y": 620,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "2e0d6b517b43e227",
    "type": "ha-number",
    "z": "1f9ff542be636aa9",
    "name": "Side 1 P2 Dryback Percentage",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "6da1c519f6c7dc05",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 470,
    "y": 620,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "224327677b576b85",
    "type": "function",
    "z": "1f9ff542be636aa9",
    "name": "Control Dehumidifer",
    "func": "// Get the Home Assistant object\nconst d = global.get('homeassistant').homeAssistant;\nlet sideRH = d.states[\"sensor.grow_side1_table_humidity\"].state;\nlet requiredRh = d.states[\"sensor.required_rh_for_desired_kpa_side_1\"].state;\nlet dehumidifierState = d.states[\"switch.side1_dehumidifer\"].state;\nlet dehumidifierEntityId = 'switch.side1_dehumidifer';\nlet humidifierState = d.states[\"switch.garden_humidifer_side_1\"].state;\nlet humidifierEntityId = 'switch.garden_humidifer_side_1';\nlet delta = 2;\nlet debugMode = false;\n\nlogDebug('sideRH, requiredRh', [sideRH, requiredRh]);\nlogDebug('dehumidifierState', dehumidifierState);\nlogDebug('delta', delta);\nlogDebug('debugMode', debugMode);\nlogDebug('rh - required', (sideRH - requiredRh))\nlogDebug('humidifierState', humidifierState);\n\n// Function to log debug messages with labels\nfunction logDebug(label, value) {\n    if (debugMode) {\n        node.warn(label + ' ' + value);\n    }\n}\n\n// Function to toggle debug mode on/off\nfunction toggleDebugMode() {\n    debugMode = !debugMode;\n    if (debugMode) {\n        node.warn('Debug mode is ON');\n    } else {\n        node.warn('Debug mode is OFF');\n    }\n}\n\n// Function to check humidity for humidifier\nfunction checkHumidifier(state, entityId, required, actual) {\n    logDebug(\"check humid ran\", required - actual + \" \" + state)\n    if (state === \"off\" && required - actual >= delta) {\n        logDebug(\"turn on humidifer\");\n        msg.payload = {\n            service: 'turn_on',\n            domain: 'switch',\n            entity_id: entityId\n        };\n        node.send(msg);\n    } else if (state === \"on\" && actual >= required) {\n        msg.payload = {\n            service: 'turn_off',\n            domain: 'switch',\n            entity_id: entityId\n        };\n        node.send(msg);\n    } else {\n        logDebug('Humid No action taken');\n    }\n}\n\n// Function to check humidity for dehumidifier\nfunction checkDehumidifier(state, entityId, required, actual) {\n    logDebug(\"check dehumid ran\", required - actual + \" \" + state)\n    if (state === \"off\" && actual - required >= delta) {\n        msg.payload = {\n            service: 'turn_on',\n            domain: 'switch',\n            entity_id: entityId\n        };\n        node.send(msg);\n    } else if (state === \"on\" && actual <= required) {\n        msg.payload = {\n            service: 'turn_off',\n            domain: 'switch',\n            entity_id: entityId\n        };\n        node.send(msg);\n    } else {\n        logDebug('No action taken Dehumid');\n    }\n}\n\n// Check humidifier\ncheckHumidifier(humidifierState, humidifierEntityId, requiredRh, sideRH);\n\n// Check dehumidifier\ncheckDehumidifier(dehumidifierState, dehumidifierEntityId, requiredRh, sideRH);\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 320,
    "y": 480,
    "wires": [
      [
        "129f5058b9722a20"
      ]
    ]
  },
  {
    "id": "f118c15ef503cb95",
    "type": "inject",
    "z": "1f9ff542be636aa9",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 110,
    "y": 480,
    "wires": [
      [
        "224327677b576b85"
      ]
    ]
  },
  {
    "id": "129f5058b9722a20",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Call Service Payload Var",
    "server": "s",
    "version": 5,
    "debugenabled": false,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 550,
    "y": 480,
    "wires": [
      []
    ]
  },
  {
    "id": "d0f37f782cfb7011",
    "type": "ha-number",
    "z": "1f9ff542be636aa9",
    "name": "Side 1 Max Temp",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "39a1a692c9adaf37",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 740,
    "y": 620,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "388d9f1d9dae3168",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "",
    "server": "s",
    "version": 5,
    "debugenabled": false,
    "domain": "light",
    "service": "turn_on",
    "areaId": [],
    "deviceId": [
      "343bb79d8040ed183cae00f29af3a9be"
    ],
    "entityId": [],
    "data": "{\"brightness\":170}",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 910,
    "y": 520,
    "wires": [
      []
    ]
  },
  {
    "id": "d7a036de98b78cd1",
    "type": "inject",
    "z": "1f9ff542be636aa9",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 760,
    "y": 460,
    "wires": [
      [
        "388d9f1d9dae3168"
      ]
    ]
  },
  {
    "id": "4a8c66f5bc470750",
    "type": "api-current-state",
    "z": "1f9ff542be636aa9",
    "name": "Fetch Exhuast state",
    "server": "s",
    "version": 3,
    "outputs": 1,
    "halt_if": "",
    "halt_if_type": "str",
    "halt_if_compare": "is",
    "entity_id": "light.grow_side_1_exhuast",
    "state_type": "str",
    "blockInputOverrides": false,
    "outputProperties": [
      {
        "property": "state",
        "propertyType": "msg",
        "value": "",
        "valueType": "entityState"
      },
      {
        "property": "data",
        "propertyType": "msg",
        "value": "",
        "valueType": "entity"
      }
    ],
    "for": "0",
    "forType": "num",
    "forUnits": "minutes",
    "override_topic": false,
    "state_location": "payload",
    "override_payload": "msg",
    "entity_location": "data",
    "override_data": "msg",
    "x": 300,
    "y": 700,
    "wires": [
      [
        "f2abd8602246cfed"
      ]
    ]
  },
  {
    "id": "622f938ac9ea8985",
    "type": "ha-number",
    "z": "a826652fd99df3a0",
    "name": "Side 1 Table 2 P2 Dryback",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "3b1aac4b8e11aa97",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 150,
    "y": 540,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "11a72986cd0a2d28",
    "type": "ha-number",
    "z": "a826652fd99df3a0",
    "name": "Side 1 Table 2  Moisture Target",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "52b67ba70833bf17",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 480,
    "y": 600,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "2fca0e10d564705a",
    "type": "ha-number",
    "z": "a826652fd99df3a0",
    "name": "Side 1 Table 2 P1 Shot Size",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "7af6402dfb23d731",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 160,
    "y": 600,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "ef049ab80baf0500",
    "type": "ha-number",
    "z": "a826652fd99df3a0",
    "name": "Side 1 Table 2 P2 Shot Size",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "b2ddf247d46cd1eb",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 720,
    "y": 540,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "fe767c9a8fa33dbe",
    "type": "ha-number",
    "z": "a826652fd99df3a0",
    "name": "Side 1 Table 2 Dark Hours",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "091ba25d13f32e9f",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 790,
    "y": 600,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "f8c51d0074321534",
    "type": "function",
    "z": "a826652fd99df3a0",
    "name": "Feed By WC",
    "func": "/**One thhing of note I use a traditional automation to update my\n * highest soil sensor. I find this is easy just to do through the gui\n */\n\n// Constants for Home Assistant Entity IDs\nconst ENTITY_IDS = {\n    highestSoilSensor: 'number.side_1_table_2_highest_soil',\n    generative: 'switch.side_1_table_2_generative',\n    darkHours: 'number.side_1_table_2_dark_hours',\n    lightOnTime: 'time.side_1_table_2_lights_on_time',\n    soilMoisture: 'sensor.vwc_b1_soil_sensor',\n    maintenancePhase: 'switch.side_1_table_2_maintenance_phase',\n    feedPumpSwitch: 'switch.side_1_table_2_feed_pump',\n    p2ShotSize: 'number.side_1_table_2_p2_delay',\n    p1ShotSize: 'number.side_1_table_2_p1_delay',\n    maxDelta: 'number.side_1_table_2_max_drybacks',\n    p2Dryback: 'number.side_1_table_2_p2_dryback',\n    targetMoisture: 'number.side_1_table_2_moisture_target'\n};\n\nconst MIN_IRRIGATION_FREQUENCY = 6 * 60; // 10 minutes in seconds\nconst debug = false;\n/**\n * \n * Nothing needs to be changed under this section unless your modifing \n * the basic functionality or how the script works. \n * Modifiy at your own risk\n * \n */\n\n// For retrieving data:\nconst DESIRED_MOISTURE = getHAState(ENTITY_IDS.targetMoisture);\nconst P1_THRESHOLD = 1; //close enough to desired moisture without blowing over\nconst P2_THRESHOLD = getHAState(ENTITY_IDS.p2Dryback);\nconst MAX_DELTA = getHAState(ENTITY_IDS.maxDelta);\nconst DELAY_FOR_P1_FEED = getHAState(ENTITY_IDS.p1ShotSize);\nconst DELAY_FOR_P2_FEED = getHAState(ENTITY_IDS.p2ShotSize);\n\n\n// For retrieving data:\nlet currentTime = getCurrentTime();\nlet currentTimeUTC = getCurrentTimeUTC();\nlet darkHours = parseFloat(getHAState(ENTITY_IDS.darkHours));\nlet generative = getHAState(ENTITY_IDS.generative);\nlet highestSoilsensorVal = getHAState(ENTITY_IDS.highestSoilSensor);\nlet lightOnTime = convertTimeToSecondsUTC(getHAState(ENTITY_IDS.lightOnTime));\nlet maintenancePhase = getHAState(ENTITY_IDS.maintenancePhase);\nlet soilMoisture = parseFloat(getHAState(ENTITY_IDS.soilMoisture));\n\n// Calculate parameters\nconst SECONDS_IN_DAY = 24 * 60 * 60; \nlet lastChangedTimeMs = new Date(global.get('homeassistant').homeAssistant.states[ENTITY_IDS.feedPumpSwitch].last_changed).getTime();\nlet lightOffTime = calculateLightOffTime(darkHours, lightOnTime);\nlet irrigationEnd = calculateIrrigationEnd(lightOffTime);\nlet irrigationStart = calculateIrrigationStart(generative, lightOnTime);\nlet inIrrigationWindow = checkInIrrigationWindow(currentTime, irrigationStart, irrigationEnd);\nlet lastChanged = convert_epoch_to_utc_seconds(lastChangedTimeMs);\nlet moistureDifference = DESIRED_MOISTURE - soilMoisture;\nlet timeSinceLastIrrigation;\n\n//store payloads\nlet delayAndTurnOffOutput = null;\nlet flipBooleanOutput = null;\nlet logOutput = null;\nlet setInputNumberOutput = null;\nlet turnOnOutput = null;\n\n\n//handle midnight crossover\nif (lastChanged < currentTimeUTC) {\n    timeSinceLastIrrigation = Math.floor(currentTimeUTC - lastChanged);\n} else {\n    timeSinceLastIrrigation = Math.floor((SECONDS_IN_DAY - lastChanged) + currentTimeUTC);\n}\n\n/**\n * Constructs a payload for Home Assistant service calls.\n * \n * @param {string} service - The service to be called (e.g., 'turn_on', 'turn_off').\n * @param {string} domain - The domain of the entity (e.g., 'switch', 'light').\n * @param {string} entity_id - The id of the entity to be acted upon.\n * @param {number} delay - The delay in seconds before the action is performed.\n * @param {object} data - Any additional data to be passed along with the service call.\n * @returns {object} - The constructed payload.\n */\nfunction buildPayload(service, domain, entity_id, delay = null, data = {}) {\n    let payload = {\n        service: service,\n        domain: domain,\n        entity_id: entity_id,\n        data: data\n    };\n\n    let message = {\n        payload: payload\n    };\n\n    if (delay !== null) {\n        message.delay = delay * 1000; // Convert seconds to milliseconds\n    }\n\n    return message;\n}\n// Whenever you want to build a payload in your processControlFlow function:\n// const payload = buildPayload('turn_on', 'switch', 'switch.your_p1_feed_id', DELAY_FOR_P1_FEED);\n\n//calculate irrigation end time\nfunction calculateIrrigationEnd(lightOffTime) {\n    if (generative == 'on') {\n        return lightOffTime - 2 * 60 * 60;\n    } else {\n        return lightOffTime - 60 * 60;\n    }\n}\n\n// Function to calculate irrigation start time dynamically based on lights on time\nfunction calculateIrrigationStart(generative, lightOnTime) {\n    let irrigationStart = lightOnTime;\n    if (generative == \"on\") {\n        irrigationStart = irrigationStart + (2 * 60 * 60); // Add 2 hours for generative steering\n    } else {\n        // Use a default start time if generative is not enabled\n        irrigationStart = irrigationStart + (60 * 60); // Add 1 hour\n    }\n    return irrigationStart;\n}\n\n//check for null states\nfunction checkForNullStates() {\n    const requiredStates = [\"highestSoilsensorVal\", \"generative\", \"darkHours\", \"lightOnTime\", \"soilMoisture\", \"maintenancePhase\"];\n\n    const nullStates = requiredStates.filter(state => eval(state) === null);\n\n    if (nullStates.length > 0) {\n        // Log and report each null state\n        nullStates.forEach(state => {\n            const errorMessage = `ERROR: ${state} is null`;\n            logOutput = logbookMsg(errorMessage);\n\n            // Create a persistent notification in Home Assistant\n            const persistentError = buildPayload('create', 'persistent_notification', '', null, { message: errorMessage, title: 'Irrigation System'});\n            node.send([null,null,null,null, persistentError]);\n        });\n        return true;\n    }\n}\n\n//converts lastchangems to seconds\nfunction convert_epoch_to_utc_seconds(epoch_ms) {\n    const epoch_seconds = epoch_ms / 1000;\n    const seconds_into_day_utc = Math.floor(epoch_seconds % SECONDS_IN_DAY);\n    return seconds_into_day_utc;\n}\n\n// Function to convert a time string in the format HH:MM:SS to seconds from midnight\nfunction convertTimeToSecondsUTC(timeString) {\n    // Split the time string by ':' to get hours, minutes, and seconds\n    const parts = timeString.split(':');\n    const hours = parseInt(parts[0], 10);\n    const minutes = parseInt(parts[1], 10);\n    const seconds = parseInt(parts[2], 10);\n\n    // Calculate the total number of seconds from midnight\n    return hours * 3600 + minutes * 60 + seconds;\n}\n\n// Function to calculate light off time dynamically based on dark hours\nfunction calculateLightOffTime(darkHours, lightOnTime) {\n    let lightDuration = (24 - darkHours) * 60 * 60; // Calculate light duration based on dark hours\n    let lightOffTime = (lightOnTime + lightDuration) % SECONDS_IN_DAY; // Adjust for midnight crossover\n\n    return lightOffTime;\n}\n\n// Function to check if the current time is within the irrigation window\nfunction checkInIrrigationWindow(currentTime, irrigationStart, irrigationEnd) {\n    // Normalize times to a 24-hour cycle to handle cases where times span across midnight\n    currentTime = currentTime % SECONDS_IN_DAY;\n    irrigationStart = irrigationStart % SECONDS_IN_DAY;\n    irrigationEnd = irrigationEnd % SECONDS_IN_DAY;\n\n    if (irrigationStart < irrigationEnd) {\n        // The irrigation window does not span midnight\n        return currentTime >= irrigationStart && currentTime < irrigationEnd;\n    } else {\n        // The irrigation window spans midnight\n        // currentTime must be either after irrigationStart on the same day or before irrigationEnd on the next day\n        return currentTime >= irrigationStart || currentTime < irrigationEnd;\n    }\n}\n\n\n// Function to get current time in seconds\nfunction getCurrentTime() {\n    const now = new Date();\n    return now.getSeconds() + (60 * (now.getMinutes() + 60 * now.getHours()));\n}\n\n// Function to get current time in UTC seconds\nfunction getCurrentTimeUTC() {\n    const now = new Date();\n    const utcSeconds = (now.getUTCHours() * 3600) + (now.getUTCMinutes() * 60) + now.getUTCSeconds();\n    return utcSeconds;\n}\n\n// Function to retrieve state from Home Assistant\nfunction getHAState(state) {\n    // Check if the states object and the specific state exist\n    if (global.get('homeassistant') && global.get('homeassistant').homeAssistant\n        && global.get('homeassistant').homeAssistant.states\n        && global.get('homeassistant').homeAssistant.states[state]) {\n        return global.get('homeassistant').homeAssistant.states[state].state;\n    } else {\n        // Handle the case where the state or any parent object is undefined\n        node.warn(\"State not found or global object is undefined: \" + state);\n        return null; // or you can throw an error or return a default value\n    }\n}\n\n\n// Enhanced logging for debugging\nfunction logDebugData() {\n    if (debug) {\n        node.warn(\"Is in irrigation window? \" + inIrrigationWindow);\n        node.warn(\"Generative: \" + generative);\n        node.warn('Maintance Phase: '+ maintenancePhase)\n        node.warn(\"Dark Hours: \" + darkHours);\n        node.warn(\"Soil moisture: \" + soilMoisture);\n        node.warn(\"last Irrigation Run \" + utcMsToLocalHHMMSS(lastChangedTimeMs));\n        node.warn(\"Highest Sensor Value: \" + highestSoilsensorVal);\n        // Additional logging to help with debugging\n        node.warn(\"Moisture Difference: \" + moistureDifference);\n        node.warn(\"timeSinceLastIrrigation: \" + toHHMMSS(timeSinceLastIrrigation));\n        node.warn(\"Current Time: \" + new Date(currentTime * 1000).toISOString().substr(11, 8));\n        node.warn(\"Irrigation Start: \" + new Date(irrigationStart * 1000).toISOString().substr(11, 8));\n        node.warn(\"Irrigation End: \" + new Date(irrigationEnd * 1000).toISOString().substr(11, 8));\n    }\n}\n\n\n//function to make logbook entries\nfunction logbookMsg(message) {\n    \n    // Create a message object with the payload for the api-call-service node\n    const logMessage = {\n        payload: {\n            service_domain: 'logbook',\n            service: 'log',\n            data: {\n            entity_id: ENTITY_IDS.feedPumpSwitch,\n            name: \"Irrigation System\",\n            message: message\n            }\n        }\n    };\n\n    return logMessage;\n}\n\n//check for min time between irrigation\nfunction minStopTime() {\n    if (timeSinceLastIrrigation < MIN_IRRIGATION_FREQUENCY) {\n        logOutput = logbookMsg(`Last irrigation was less than ${MIN_IRRIGATION_FREQUENCY / 60} minutes ago. Not performing a check now.`);\n        node.send([null,null,null,null, logOutput]);\n        return true;\n    }\nreturn false;\n}\n\n//check for max dryback\nfunction maxDrybackCheck() {\n    if (moistureDifference > MAX_DELTA) {\n        logOutput = logbookMsg(\"Max Dryback Feeding\");\n        turnOnOutput = buildPayload('turn_on', 'switch', ENTITY_IDS.feedPumpSwitch);\n        delayAndTurnOffOutput = buildPayload('turn_off', 'switch', ENTITY_IDS.feedPumpSwitch, DELAY_FOR_P2_FEED);\n        node.send([turnOnOutput, delayAndTurnOffOutput, null, null, logOutput]);\n        return true;\n    }\nreturn false;\n}\n//reset maintenance phase if outside irrigation window and it is on\nfunction resetMaintenancePhase() {\n    if (!inIrrigationWindow && maintenancePhase != 'off') {\n        logOutput = logbookMsg(\"Resetting Maintenance Switch\");\n        flipBooleanOutput = buildPayload('turn_off', 'switch', ENTITY_IDS.maintenancePhase);\n        node.send([null, null, flipBooleanOutput, null, logOutput]);\n    }\nreturn false;\n}\n\n//reset highest soil sensor at beginging of lights on\nfunction setMaxSoilSensorTracker() {\n    //node.warn(\"set soil warn\" + (currentTime -lightOnTime))\n    //reset highest soil value sensor at beginging of lights on\n    if (soilMoisture > highestSoilsensorVal) {\n        logOutput = logbookMsg(\"Setting Highest Soil Sensor to VWC\");\n        setInputNumberOutput = buildPayload('set_value', 'number', ENTITY_IDS.highestSoilSensor, null, { value: soilMoisture});\n        node.send([null, null, null, setInputNumberOutput, logOutput]);\n        return true;\n    }\n}\n\n//reset highest soil sensor at beginging of lights on\nfunction resetMaxSoilSensorTracker() {\n    //node.warn(\"set soil warn\" + (currentTime -lightOnTime))\n    //reset highest soil value sensor at beginging of lights on\n    if (Math.abs(currentTime - lightOnTime) <= 60) {\n        logOutput = logbookMsg(\"Flipping Highest Soil Sensor to 0\");\n        setInputNumberOutput = buildPayload('set_value', 'number', ENTITY_IDS.highestSoilSensor, null, { value: 0 });\n        node.send([null, null, null, setInputNumberOutput, logOutput]);\n        return true;\n    }\nreturn false;\n}\n\n//switch maintenance phase if in irrigation window and desired moisture is reached\nfunction switchMaintenancePhase() {\n    if (maintenancePhase == 'off' && inIrrigationWindow) {\n        if (highestSoilsensorVal >= DESIRED_MOISTURE) {\n            logOutput = logbookMsg('P2 Flip Switch Desired Moisture Reached');\n            flipBooleanOutput = buildPayload('turn_on', 'switch', ENTITY_IDS.maintenancePhase);\n            node.send ([null, null, flipBooleanOutput, null, logOutput]);\n            return true;\n        }\n    }\nreturn false;\n}\n//convert seconds to HH:MM:SS for output only\nfunction toHHMMSS(timeSeconds) {\n    const sec = parseInt(timeSeconds, 10); // convert value to number if it's string\n    let hours = Math.floor(sec / 3600); // get hours\n    let minutes = Math.floor((sec - (hours * 3600)) / 60); // get minutes\n    let seconds = sec - (hours * 3600) - (minutes * 60); // get seconds\n\n    // add 0 if value < 10; Example: 2 -> 02\n    if (hours < 10) { hours = \"0\" + hours; }\n    if (minutes < 10) { minutes = \"0\" + minutes; }\n    if (seconds < 10) { seconds = \"0\" + seconds; }\n\n    return hours + ':' + minutes + ':' + seconds; // Return is HH : MM : SS\n}\n\n//convert utc ms to local time HH:MM:SS\nfunction utcMsToLocalHHMMSS(utcMs) {\n    var date = new Date(utcMs);\n    return date.toLocaleTimeString('en-US', { hour12: false });\n}\n//run p1 and p2 feeds\nfunction processControlFlow() {\n    if (maintenancePhase == 'off' && moistureDifference > P1_THRESHOLD) {\n        logOutput = logbookMsg('P1 feed');\n        turnOnOutput = buildPayload('turn_on', 'switch', ENTITY_IDS.feedPumpSwitch);\n        delayAndTurnOffOutput = buildPayload('turn_off', 'switch', ENTITY_IDS.feedPumpSwitch, DELAY_FOR_P1_FEED);\n        node.send([turnOnOutput, delayAndTurnOffOutput, null, null, logOutput]);\n    } else if ( maintenancePhase == 'on' && moistureDifference > P2_THRESHOLD) {\n        logOutput = logbookMsg('P2 feed');\n        turnOnOutput = buildPayload('turn_on', 'switch', ENTITY_IDS.feedPumpSwitch);\n        delayAndTurnOffOutput = buildPayload('turn_off', 'switch', ENTITY_IDS.feedPumpSwitch, DELAY_FOR_P2_FEED);\n        node.send ([turnOnOutput, delayAndTurnOffOutput, null, null, logOutput]);\n    }\n}\n\nlogDebugData();\ncheckForNullStates();\nsetMaxSoilSensorTracker();\nswitchMaintenancePhase();\nif (!minStopTime()) {\n    if (!maxDrybackCheck()) {\n        if (inIrrigationWindow) {\n            processControlFlow();\n        }\n    }   \n}\nresetMaintenancePhase();\nresetMaxSoilSensorTracker();",
    "outputs": 5,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 308.0994567871094,
    "y": 83.09091186523438,
    "wires": [
      [
        "67a2a6b74fd0e587"
      ],
      [
        "78c35e6ffe5cf2a0"
      ],
      [
        "04f9adfef71dc994"
      ],
      [
        "3e5676e88f6fe3b8"
      ],
      [
        "a6889839ae6b2d83"
      ]
    ],
    "outputLabels": [
      "Turn On Feed",
      "Turn Off Feed",
      "Flip Input Boolean",
      "Set Highest Value Back",
      "Log To Logbook"
    ]
  },
  {
    "id": "8768cfef01f17877",
    "type": "inject",
    "z": "a826652fd99df3a0",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 128.09945678710938,
    "y": 83.09091186523438,
    "wires": [
      [
        "f8c51d0074321534"
      ]
    ]
  },
  {
    "id": "67a2a6b74fd0e587",
    "type": "api-call-service",
    "z": "a826652fd99df3a0",
    "name": "Turn Pump On",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "payload.message",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 688.0994567871094,
    "y": 23.090911865234375,
    "wires": [
      []
    ]
  },
  {
    "id": "78c35e6ffe5cf2a0",
    "type": "delay",
    "z": "a826652fd99df3a0",
    "name": "",
    "pauseType": "delayv",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1000",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 488.0994567871094,
    "y": 63.090911865234375,
    "wires": [
      [
        "b89eeece6d5ea559"
      ]
    ]
  },
  {
    "id": "04f9adfef71dc994",
    "type": "api-call-service",
    "z": "a826652fd99df3a0",
    "name": "Flip maintaince Switch",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 708.0994567871094,
    "y": 143.09091186523438,
    "wires": [
      []
    ]
  },
  {
    "id": "3e5676e88f6fe3b8",
    "type": "api-call-service",
    "z": "a826652fd99df3a0",
    "name": "Reset Max Soil Tracker",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "{{payload.data.value}}",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 748.0994567871094,
    "y": 203.09091186523438,
    "wires": [
      []
    ]
  },
  {
    "id": "a6889839ae6b2d83",
    "type": "api-call-service",
    "z": "a826652fd99df3a0",
    "name": "Send Logbook Msg",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [],
    "data": "payload.message\t\t",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 388.0994567871094,
    "y": 183.09091186523438,
    "wires": [
      []
    ]
  },
  {
    "id": "b89eeece6d5ea559",
    "type": "api-call-service",
    "z": "a826652fd99df3a0",
    "name": "Turn pump off",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 688.0994567871094,
    "y": 83.09091186523438,
    "wires": [
      []
    ]
  },
  {
    "id": "af6157ee2f35ec64",
    "type": "inject",
    "z": "a826652fd99df3a0",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 150,
    "y": 280,
    "wires": [
      [
        "1e6dcc3c49033d86"
      ]
    ]
  },
  {
    "id": "1e6dcc3c49033d86",
    "type": "function",
    "z": "a826652fd99df3a0",
    "name": "Turn Lights On/Off",
    "func": "const HA_CONFIG = {\n    homeAssistantObject: 'homeassistant.homeAssistant',\n    darkHoursEntity: 'number.side_1_table_2_dark_hours',\n    switchStateEntity: 'switch.sengled_e1c_nb7_switch_2',\n    lightsOnTimeEntity: 'time.side_1_table_2_lights_on_time',\n    lightControlEntity: 'switch.sengled_e1c_nb7_switch_2',\n    serviceDomain: 'switch'\n};\n\n// Fetch the Home Assistant object and states\nconst d = global.get(HA_CONFIG.homeAssistantObject);\nlet darkHours = parseFloat(d.states[HA_CONFIG.darkHoursEntity].state);\nlet switchState = d.states[HA_CONFIG.switchStateEntity].state;\nlet lightsOnTime = d.states[HA_CONFIG.lightsOnTimeEntity].state;\nlet debugMode = false;\n\n// Function to log debug messages with labels\nfunction logDebug(label, value) {\n    if (debugMode) {\n        node.warn(label + ' ' + value);\n    }\n}\n\n// Function to toggle debug mode on/off\nfunction toggleDebugMode() {\n    debugMode = !debugMode;\n    if (debugMode) {\n        node.warn('Debug mode is ON');\n    } else {\n        node.warn('Debug mode is OFF');\n    }\n}\n\n// Function to parse time in HH:mm:ss format to seconds\nfunction parseTimeToSeconds(timeStr) {\n    var parts = timeStr.split(':');\n    if (parts.length === 3) {\n        var hours = parseInt(parts[0]);\n        var minutes = parseInt(parts[1]);\n        var seconds = parseInt(parts[2]);\n        return hours * 3600 + minutes * 60 + seconds;\n    } else {\n        // Handle invalid time format if needed\n        node.error('Invalid time format in msg.lightOn');\n        return 0; // Return 0 as a fallback\n    }\n}\n\n// Function to calculate the lights control logic\nfunction calculateLightsControl() {\n    const currentDate = new Date();\n    const currentHours = currentDate.getHours();\n    const currentMinutes = currentDate.getMinutes();\n    const currentSeconds = currentDate.getSeconds();\n    const currentTime = (currentHours * 3600) + (currentMinutes * 60) + currentSeconds;\n    let lightsOnTimeInSeconds = parseTimeToSeconds(lightsOnTime);\n    let lightsOffTimeInSeconds = lightsOnTimeInSeconds + ((24 - darkHours) * 3600);\n\n    if (lightsOffTimeInSeconds >= 86400) {\n        lightsOffTimeInSeconds -= 86400;\n    }\n    \n    logDebug('lightsOnTimeInSeconds:', lightsOnTimeInSeconds);\n    logDebug('lightsOffTimeInSeconds:', lightsOffTimeInSeconds);\n    logDebug('darkHours:', darkHours);\n    logDebug('current time ', currentTime);\n    logDebug('Switch State: ', switchState);\n\n    if (lightsOnTimeInSeconds < lightsOffTimeInSeconds) {\n        if (currentTime >= lightsOnTimeInSeconds && currentTime < lightsOffTimeInSeconds) {\n            if (switchState == 'off') {\n                return turnOnLights();\n            }\n        } else {\n            if (switchState == 'on') {\n                return turnOffLights();\n            }\n        }\n    } else {\n        if (currentTime >= lightsOnTimeInSeconds || currentTime < lightsOffTimeInSeconds) {\n            if (switchState == 'off') {\n                return turnOnLights();\n            }\n        } else {\n            if (switchState == 'on') {\n                return turnOffLights();\n            }\n        }\n    }\n    \n    logDebug('No action needed', '');\n}\n\nfunction turnOnLights() {\n    msg.payload = {\n        service_domain: HA_CONFIG.serviceDomain,\n        service: 'turn_on',\n        entity_id: HA_CONFIG.lightControlEntity\n    };\n    logDebug('Turning on the lights', '');\n    return node.send(msg);\n}\n\nfunction turnOffLights() {\n    msg.payload = {\n        service_domain: HA_CONFIG.serviceDomain,\n        service: 'turn_off',\n        entity_id: HA_CONFIG.lightControlEntity\n    };\n    logDebug('Turning off the lights', '');\n    return node.send(msg);\n}\n\n// Call the calculateLightsControl function to perform the lights control logic\ncalculateLightsControl();\n",
    "outputs": 1,
    "timeout": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 300,
    "wires": [
      [
        "af6c52a47d1b503f"
      ]
    ]
  },
  {
    "id": "af6c52a47d1b503f",
    "type": "api-call-service",
    "z": "a826652fd99df3a0",
    "name": "Call Service Payload Var",
    "server": "s",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 610,
    "y": 280,
    "wires": [
      []
    ]
  },
  {
    "id": "eb7d5955fdaf8e22",
    "type": "ha-number",
    "z": "a826652fd99df3a0",
    "name": "Side 1 Table 2 Highest Soil Reading",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "016894b0f307adf7",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 200,
    "y": 680,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "ace6c1f93a2269a1",
    "type": "ha-switch",
    "z": "a826652fd99df3a0",
    "name": "Side 1 Table 2 Maintenance Phase",
    "version": 0,
    "debugenabled": false,
    "inputs": 1,
    "outputs": 2,
    "entityConfig": "f4ff0d1e97276844",
    "enableInput": true,
    "outputOnStateChange": false,
    "outputProperties": [
      {
        "property": "outputType",
        "propertyType": "msg",
        "value": "state change",
        "valueType": "str"
      },
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "entityState"
      }
    ],
    "x": 520,
    "y": 680,
    "wires": [
      [],
      []
    ],
    "server": "s"
  },
  {
    "id": "f4ad8d255fb1e74c",
    "type": "ha-switch",
    "z": "a826652fd99df3a0",
    "name": "Side 1 Table 2 Generative ",
    "version": 0,
    "debugenabled": false,
    "inputs": 1,
    "outputs": 2,
    "entityConfig": "abb119775b0b3ed3",
    "enableInput": true,
    "outputOnStateChange": false,
    "outputProperties": [
      {
        "property": "outputType",
        "propertyType": "msg",
        "value": "state change",
        "valueType": "str"
      },
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "entityState"
      }
    ],
    "x": 179.0994415283203,
    "y": 752.54541015625,
    "wires": [
      [],
      []
    ],
    "server": "s"
  },
  {
    "id": "085359c72777fe32",
    "type": "ha-time-entity",
    "z": "a826652fd99df3a0",
    "name": "Side 1 Table 2 Lights On Time",
    "version": 0,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "c1d8138ae2c8fc10",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 460,
    "y": 760,
    "wires": [
      []
    ],
    "server": "s"
  },
  {
    "id": "e80956b63bb78b14",
    "type": "ha-number",
    "z": "a826652fd99df3a0",
    "name": "Side 1 Table 2 Max Dryback",
    "version": 1,
    "debugenabled": false,
    "inputs": 0,
    "outputs": 1,
    "entityConfig": "738a591ae03dd3f5",
    "mode": "listen",
    "value": "payload",
    "valueType": "msg",
    "outputProperties": [
      {
        "property": "payload",
        "propertyType": "msg",
        "value": "",
        "valueType": "value"
      },
      {
        "property": "previousValue",
        "propertyType": "msg",
        "value": "",
        "valueType": "previousValue"
      }
    ],
    "x": 440,
    "y": 540,
    "wires": [
      []
    ],
    "server": "s"
  }
]
