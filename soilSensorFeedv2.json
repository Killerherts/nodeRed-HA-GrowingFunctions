[
  {
    "id": "54825be9f507927b",
    "type": "inject",
    "z": "1f9ff542be636aa9",
    "name": "",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "60",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 130,
    "y": 80,
    "wires": [
      [
        "b7b40814c4fec103"
      ]
    ]
  },
  {
    "id": "b7b40814c4fec103",
    "type": "function",
    "z": "1f9ff542be636aa9",
    "name": "Feed By WC",
    "func": "/**One thhing of note I use a traditional automation to update my\n * highest soil sensor. I find this is easy just to do through the gui\n */\n\n// Constants for Home Assistant Entity IDs\nconst ENTITY_IDS = {\n    highestSoilSensor: 'input_number.highest_soil_sensor_value_side_1',\n    generative: 'input_boolean.side1_generative_steering',\n    darkHours: 'input_number.side_1_dark_hours',\n    lightOnTime: 'input_datetime.side_1_lights_on_time',\n    soilMoisture: 'sensor.vwc_a2_soil_sensor',\n    maintenancePhase: 'input_boolean.side1_maintance_phase',\n    feedPumpSwitch: 'switch.side_1_feed_pump_switch'\n};\n\nconst MIN_IRRIGATION_FREQUENCY = 6 * 60; // 10 minutes in seconds\nconst DESIRED_MOISTURE = 45; // Desired moisture level in water content percentage\nconst P1_THRESHOLD = 2;\nconst P2_THRESHOLD = 7; //dryback % before sending a p2\nconst MAX_DELTA = 22; //max dryback overnight\nconst DELAY_FOR_P1_FEED = 13;  // in seconds\nconst DELAY_FOR_P2_FEED = 21;  // in seconds\nconst debug = true;\n/**\n * \n * Nothing needs to be changed under this section unless your modifing \n * the basic functionality or how the script works. \n * Modifiy at your own risk\n * \n */\n\n// For retrieving data:\nlet highestSoilsensorVal = getHAState(ENTITY_IDS.highestSoilSensor);\nlet generative = getHAState(ENTITY_IDS.generative);\nlet darkHours = parseFloat(getHAState(ENTITY_IDS.darkHours));\nlet lightOnTime = convertTimeToSecondsUTC(getHAState(ENTITY_IDS.lightOnTime));\nlet soilMoisture = parseFloat(getHAState(ENTITY_IDS.soilMoisture));\nlet maintenancePhase = getHAState(ENTITY_IDS.maintenancePhase);\nlet currentTime = getCurrentTime();\nlet currentTimeUTC = getCurrentTimeUTC();\n\n// Calculate parameters\nconst SECONDS_IN_DAY = 24 * 60 * 60; \nlet lightOffTime = calculateLightOffTime(darkHours, lightOnTime);\nlet irrigationStart = calculateIrrigationStart(generative, lightOnTime);\nlet irrigationEnd = calculateIrrigationEnd(lightOffTime);\nlet lastChangedTimeMs = new Date(global.get('homeassistant').homeAssistant.states[ENTITY_IDS.feedPumpSwitch].last_changed).getTime();\nlet lastChanged = convert_epoch_to_utc_seconds(lastChangedTimeMs);\nlet inIrrigationWindow = checkInIrrigationWindow(currentTime, irrigationStart, irrigationEnd);\nlet timeSinceLastIrrigation;\nlet moistureDifference = DESIRED_MOISTURE - soilMoisture;\n\nif (lastChanged < currentTimeUTC) {\n    timeSinceLastIrrigation = Math.floor(currentTimeUTC - lastChanged);\n} else {\n    timeSinceLastIrrigation = Math.floor((SECONDS_IN_DAY - lastChanged) + currentTimeUTC);\n}\n\nfunction utcMsToLocalHHMMSS(utcMs) {\n    var date = new Date(utcMs);\n    return date.toLocaleTimeString('en-US', { hour12: false });\n}\n\nfunction toHHMMSS(timeSeconds) {\n    const sec = parseInt(timeSeconds, 10); // convert value to number if it's string\n    let hours = Math.floor(sec / 3600); // get hours\n    let minutes = Math.floor((sec - (hours * 3600)) / 60); // get minutes\n    let seconds = sec - (hours * 3600) - (minutes * 60); // get seconds\n\n    // add 0 if value < 10; Example: 2 -> 02\n    if (hours < 10) { hours = \"0\" + hours; }\n    if (minutes < 10) { minutes = \"0\" + minutes; }\n    if (seconds < 10) { seconds = \"0\" + seconds; }\n\n    return hours + ':' + minutes + ':' + seconds; // Return is HH : MM : SS\n}\n\n\n// Function to get current time in UTC seconds\nfunction getCurrentTimeUTC() {\n    const now = new Date();\n    const utcSeconds = (now.getUTCHours() * 3600) + (now.getUTCMinutes() * 60) + now.getUTCSeconds();\n    return utcSeconds;\n}\n\n\nfunction convert_epoch_to_utc_seconds(epoch_ms) {\n    const epoch_seconds = epoch_ms / 1000;\n    const seconds_into_day_utc = Math.floor(epoch_seconds % SECONDS_IN_DAY);\n    return seconds_into_day_utc;\n}\n\nfunction convertTimeToSecondsUTC(timeString) {\n    // Split the time string by ':' to get hours, minutes, and seconds\n    const parts = timeString.split(':');\n    const hours = parseInt(parts[0], 10);\n    const minutes = parseInt(parts[1], 10);\n    const seconds = parseInt(parts[2], 10);\n\n    // Calculate the total number of seconds from midnight\n    return hours * 3600 + minutes * 60 + seconds;\n}\n\nfunction convertUTCToLocalTime(utcMilliseconds) {\n    // Create a new Date object from the UTC milliseconds\n    const date = new Date(utcMilliseconds);\n\n    // Options for toLocaleTimeString to output time in HH:MM:SS format\n    const options = {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false // Use 24-hour format\n    };\n\n    // Convert to local time string with specified options\n    // @ts-ignore\n    return date.toLocaleTimeString( 'en-US', options);\n}\n\n// Function to retrieve state from Home Assistant\nfunction getHAState(state) {\n    // Check if the states object and the specific state exist\n    if (global.get('homeassistant') && global.get('homeassistant').homeAssistant\n        && global.get('homeassistant').homeAssistant.states\n        && global.get('homeassistant').homeAssistant.states[state]) {\n        return global.get('homeassistant').homeAssistant.states[state].state;\n    } else {\n        // Handle the case where the state or any parent object is undefined\n        node.warn(\"State not found or global object is undefined: \" + state);\n        return null; // or you can throw an error or return a default value\n    }\n}\n\n\n/**\n * Constructs a payload for Home Assistant service calls.\n * \n * @param {string} service - The service to be called (e.g., 'turn_on', 'turn_off').\n * @param {string} domain - The domain of the entity (e.g., 'switch', 'light').\n * @param {string} entity_id - The id of the entity to be acted upon.\n * @param {number} delay - The delay in seconds before the action is performed.\n * @param {object} data - Any additional data to be passed along with the service call.\n * @returns {object} - The constructed payload.\n */\nfunction buildPayload(service, domain, entity_id, delay = null, data = {}) {\n    let payload = {\n        service: service,\n        domain: domain,\n        entity_id: entity_id,\n        data: data\n    };\n\n    let message = {\n        payload: payload\n    };\n\n    if (delay !== null) {\n        message.delay = delay * 1000; // Convert seconds to milliseconds\n    }\n\n    return message;\n}\n// Whenever you want to build a payload in your processControlFlow function:\n// const payload = buildPayload('turn_on', 'switch', 'switch.your_p1_feed_id', DELAY_FOR_P1_FEED);\n\n\n\n// Function to get current time in seconds\nfunction getCurrentTime() {\n    const now = new Date();\n    return now.getSeconds() + (60 * (now.getMinutes() + 60 * now.getHours()));\n}\n\nfunction calculateLightOffTime(darkHours, lightOnTime) {\n    let lightDuration = (24 - darkHours) * 60 * 60; // Calculate light duration based on dark hours\n    let lightOffTime = (lightOnTime + lightDuration) % SECONDS_IN_DAY; // Adjust for midnight crossover\n\n    return lightOffTime;\n}\n\n\nfunction calculateIrrigationEnd(lightOffTime) {\n    if (generative == 'on') {\n        return lightOffTime - 2 * 60 * 60;\n    } else {\n        return lightOffTime - 60 * 60;\n    }\n}\n\n// Function to calculate irrigation start time dynamically based on lights on time\nfunction calculateIrrigationStart(generative, lightOnTime) {\n    let irrigationStart = lightOnTime;\n    if (generative == \"on\") {\n        irrigationStart = irrigationStart + (2 * 60 * 60); // Add 2 hours for generative steering\n    } else {\n        // Use a default start time if generative is not enabled\n        irrigationStart = irrigationStart + (60 * 60); // Add 1 hour\n    }\n    return irrigationStart;\n}\n\n\n\nfunction checkInIrrigationWindow(currentTime, irrigationStart, irrigationEnd) {\n    // Normalize times to a 24-hour cycle to handle cases where times span across midnight\n    currentTime = currentTime % SECONDS_IN_DAY;\n    irrigationStart = irrigationStart % SECONDS_IN_DAY;\n    irrigationEnd = irrigationEnd % SECONDS_IN_DAY;\n\n    if (irrigationStart < irrigationEnd) {\n        // The irrigation window does not span midnight\n        return currentTime >= irrigationStart && currentTime < irrigationEnd;\n    } else {\n        // The irrigation window spans midnight\n        // currentTime must be either after irrigationStart on the same day or before irrigationEnd on the next day\n        return currentTime >= irrigationStart || currentTime < irrigationEnd;\n    }\n}\n\n// Enhanced logging for debugging\nfunction logDebugData() {\n    if (debug) {\n        node.warn(\"Is in irrigation window? \" + inIrrigationWindow);\n        node.warn(\"Generative: \" + generative);\n        node.warn('Maintance Phase: '+ maintenancePhase)\n        node.warn(\"Dark Hours: \" + darkHours);\n        node.warn(\"Soil moisture: \" + soilMoisture);\n        node.warn(\"last Irrigation Run \" + utcMsToLocalHHMMSS(lastChangedTimeMs));\n        node.warn(\"Highest Sensor Value: \" + highestSoilsensorVal);\n        // Additional logging to help with debugging\n        node.warn(\"Moisture Difference: \" + moistureDifference);\n        node.warn(\"timeSinceLastIrrigation: \" + toHHMMSS(timeSinceLastIrrigation));\n        node.warn(\"Current Time: \" + new Date(currentTime * 1000).toISOString().substr(11, 8));\n        node.warn(\"Irrigation Start: \" + new Date(irrigationStart * 1000).toISOString().substr(11, 8));\n        node.warn(\"Irrigation End: \" + new Date(irrigationEnd * 1000).toISOString().substr(11, 8));\n    }\n}\n\n//function to make logbook entries\nfunction logbookMsg(message) {\n    // Create a message object with the payload for the api-call-service node\n    const logMessage = {\n        payload: {\n            service_domain: 'logbook',\n            service: 'log',\n            data: {\n            entity_id: ENTITY_IDS.feedPumpSwitch,\n            name: \"Irrigation System\",\n            message: message\n            }\n        }\n    };\n    node.send([null, null, null, null, logMessage]);\n}\n\nfunction processControlFlow() {\n    let turnOnOutput = null;\n    let delayAndTurnOffOutput = null;\n    let flipBooleanOutput = null;\n    let setInputNumberOutput = null;\n    if (timeSinceLastIrrigation < MIN_IRRIGATION_FREQUENCY) {\n        logbookMsg(`Last irrigation was less than ${MIN_IRRIGATION_FREQUENCY / 60} minutes ago. Not performing a check now.`);\n        return [null, null, null, null];\n    }\n\n    //reset highest soil value sensor at beginging of lights on\n    if (Math.abs(currentTimeUTC - lightOnTime) < 60) {\n        setInputNumberOutput = buildPayload('set_value', 'input_number', ENTITY_IDS.highestSoilSensor, null, { value: 0 });  // Reset highestSoilSensor value to 0\n        return setInputNumberOutput\n    }\n\n    \n    if (moistureDifference > MAX_DELTA) {\n        logbookMsg(\"Max Dryback Feeding\");\n        turnOnOutput = buildPayload('turn_on', 'switch', ENTITY_IDS.feedPumpSwitch);\n        delayAndTurnOffOutput = buildPayload('turn_off', 'switch', ENTITY_IDS.feedPumpSwitch, DELAY_FOR_P2_FEED);\n    } else if (inIrrigationWindow) {\n        if (maintenancePhase == 'off') {\n            if (highestSoilsensorVal >= DESIRED_MOISTURE) {\n                logbookMsg('P2 Flip Switch');\n                flipBooleanOutput = buildPayload('turn_on', 'input_boolean', ENTITY_IDS.maintenancePhase);\n            } else if (moistureDifference > P1_THRESHOLD) {\n                logbookMsg('P1 feed');\n                turnOnOutput = buildPayload('turn_on', 'switch', ENTITY_IDS.feedPumpSwitch);\n                delayAndTurnOffOutput = buildPayload('turn_off', 'switch', ENTITY_IDS.feedPumpSwitch, DELAY_FOR_P1_FEED);\n            }\n        } else if (moistureDifference > P2_THRESHOLD) {\n            logbookMsg('P2 feed');\n            turnOnOutput = buildPayload('turn_on', 'switch', ENTITY_IDS.feedPumpSwitch);\n            delayAndTurnOffOutput = buildPayload('turn_off', 'switch', ENTITY_IDS.feedPumpSwitch, DELAY_FOR_P2_FEED);\n        }\n    }\n    if (!inIrrigationWindow && maintenancePhase != 'off') {\n                logbookMsg(\"Resetting Maintenance Switch\");\n                flipBooleanOutput = buildPayload('turn_off', 'input_boolean', ENTITY_IDS.maintenancePhase);\n    }\n    return [turnOnOutput, delayAndTurnOffOutput, flipBooleanOutput, setInputNumberOutput];\n}\n\nlogDebugData()\n// Run the processControlFlow function\nreturn processControlFlow();\n",
    "outputs": 5,
    "timeout": "",
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 370,
    "y": 80,
    "wires": [
      [
        "fe7d6789a0b7ad4f"
      ],
      [
        "421bf29ad54d9896"
      ],
      [
        "275ecd72a1b51e2a"
      ],
      [
        "2a99fbe644e176ea"
      ],
      [
        "c9ca6bdec3227eb4"
      ]
    ],
    "outputLabels": [
      "Turn On Feed",
      "Turn Off Feed",
      "Flip Input Boolean",
      "Set Highest Value Back",
      "Log To Logbook"
    ]
  },
  {
    "id": "fe7d6789a0b7ad4f",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Call Service Payload Var",
    "server": "xxxxx",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "payload.message",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 850,
    "y": 20,
    "wires": [
      []
    ]
  },
  {
    "id": "421bf29ad54d9896",
    "type": "delay",
    "z": "1f9ff542be636aa9",
    "name": "",
    "pauseType": "delayv",
    "timeout": "5",
    "timeoutUnits": "seconds",
    "rate": "1000",
    "nbRateUnits": "1",
    "rateUnits": "second",
    "randomFirst": "1",
    "randomLast": "5",
    "randomUnits": "seconds",
    "drop": false,
    "allowrate": false,
    "outputs": 1,
    "x": 640,
    "y": 80,
    "wires": [
      [
        "d761f5c21d0e19d0"
      ]
    ]
  },
  {
    "id": "275ecd72a1b51e2a",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Call Service Payload Var",
    "server": "xxxxx",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 870,
    "y": 140,
    "wires": [
      []
    ]
  },
  {
    "id": "2a99fbe644e176ea",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Call Service Payload Var",
    "server": "xxxxx",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "{{payload.value}}",
    "dataType": "json",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 850,
    "y": 200,
    "wires": [
      []
    ]
  },
  {
    "id": "c9ca6bdec3227eb4",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Call Service Payload Var",
    "server": "xxxxx",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [],
    "data": "payload.message\t\t",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 830,
    "y": 260,
    "wires": [
      []
    ]
  },
  {
    "id": "d761f5c21d0e19d0",
    "type": "api-call-service",
    "z": "1f9ff542be636aa9",
    "name": "Call Service Payload Var",
    "server": "xxxxx",
    "version": 5,
    "debugenabled": true,
    "domain": "{{payload.service_domain}}",
    "service": "{{payload.service}}",
    "areaId": [],
    "deviceId": [],
    "entityId": [
      "{{payload.entity_id}}"
    ],
    "data": "",
    "dataType": "jsonata",
    "mergeContext": "",
    "mustacheAltTags": false,
    "outputProperties": [],
    "queue": "none",
    "x": 850,
    "y": 80,
    "wires": [
      []
    ]
  }
]